{"http_interactions": [{"request": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"User-Agent": ["python-requests/2.27.1"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://www.optyczne.pl/1935-Nikon_D5500-specyfikacja_aparatu.html"}, "response": {"body": {"encoding": "ISO-8859-2", "base64_string": ""}, "headers": {"Date": ["Wed, 25 Dec 2024 19:29:21 GMT"], "Server": ["Apache"], "Strict-Transport-Security": ["max-age=63072000"], "Set-Cookie": ["PHPSESSID=g7taqruqqh3neh4asa2faaeb26; path=/"], "Expires": ["Thu, 19 Nov 1981 08:52:00 GMT"], "Cache-Control": ["no-store, no-cache, must-revalidate, post-check=0, pre-check=0"], "Pragma": ["no-cache"], "Keep-Alive": ["timeout=4, max=100"], "Connection": ["Keep-Alive"], "Transfer-Encoding": ["chunked"], "Content-Type": ["text/html; charset=ISO-8859-2"]}, "status": {"code": 200, "message": "OK"}, "url": "https://www.optyczne.pl/1935-Nikon_D5500-specyfikacja_aparatu.html"}, "recorded_at": "2024-12-25T19:29:21"}], "recorded_with": "betamax/0.8.1"}