{"http_interactions": [{"request": {"body": {"encoding": "utf-8", "base64_string": ""}, "headers": {"User-Agent": ["python-requests/2.27.1"], "Accept-Encoding": ["gzip, deflate"], "Accept": ["*/*"], "Connection": ["keep-alive"]}, "method": "GET", "uri": "https://www.optyczne.pl/153-Pentax_*ist_DL2-specyfikacja_aparatu.html"}, "response": {"body": {"encoding": "ISO-8859-2", "base64_string": "CgoKCgogIAo8IURPQ1RZUEUgaHRtbD4KPGh0bWwgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiIGxhbmc9InBsLVBMIj4KPGhlYWQ+CjxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJsb3JuZXRraSwgbG9ybmV0a2EsIG9iaWVrdHl3LCBhcGFyYXQsIGN5ZnJhLCBjeWZy83drYSwgc3prs28sIHRlc3QsIHRlc3R5IHRlc3R5IGxvcm5ldGVrLCB0ZXN0eSBhcGFyYXTzdywgdGVzdHkgb2JpZWt0eXfzdywgZm90b2dyYWZpYSwgZm90bywgdGVsZXNrb3AsIHRlbGVza29weSwgb2t1bGFyeSwgZGV0ZWt0b3J5LCBtYXRyeWNhLCBNVEYsIENDRCwgQ01PUywgbHVzdHJ6YW5rYSwgcmVmcmFrdG9yLCByZWZsZWt0b3IsIHNvY3pld2thLCB0ZWxlb2JpZWt0eXcsIHpvb20sIHpkaupjaWEsIHN0YXR5dywgZ7Nvd2ljYSwgbW9udGG/IiAvPgo8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iTmFqbGVwc3plIHRlc3R5IG9iaWVrdHl383csIHRlc3R5IGFwYXJhdPN3IGN5ZnJvd3ljaCBpIHRlc3R5IGxvcm5ldGVrIHcgc2llY2khIEpltmxpIHN6dWthc3oga29tcGV0ZW50bnljaCBpbmZvcm1hY2ppIHogdGVtYXR5a2kgZm90by1vcHR5Y3puZWogdG8gdHJhZmmzZbYgd2Ugd7NhtmNpd2UgbWllanNjZS4gQ3pla2EgdHUgbmEgQ2llYmllIG9ncm9tbmEgaWxvtuYgcHJvZmVzam9uYWxueWNoIGkgb2JpZWt0eXdueWNoIHRlc3TzdyBzcHJ66nR1IG9wdHljem5lZ28sIG9ic3plcm5lIGkgY2lla2F3ZSBhcnR5a3WzeSwgbm93b7ZjaSB6IGJyYW6/eSwgYm9nYXR5IHcgemF3YXJ0b7bmIG1lcnl0b3J5Y3pusSBpIGlsdXN0cm93YW55IHOzb3duaWN6ZWsgb3JheiBiYXp5IGRhbnljaCB6YXdpZXJharFjZSBzZXRraSBsb3JuZXRlaywgYXBhcmF083cgaSBvYmlla3R5d/N3LiIgLz4KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9aXNvLTg4NTktMiIgLz4KPHRpdGxlPlBlbnRheCAqaXN0IERMMiAtIE9wdHljem5lLnBsPC90aXRsZT4KICAgICA8IS0tIEZhdmljb24gLS0+CiAgICAgICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSIvaW1hZ2VzL2Zhdmljb24uaWNvIiB0eXBlPSJpbWFnZS94LWljb24iIC8+CiAgICAgIAogICAgICA8IS0tIENTUyAtLT4KICAgICAgICA8bGluayByZWw9J3N0eWxlc2hlZXQnIGhyZWY9J3NoYXJlL2ZvbnQvZm9udGVsbG8vY3NzL2ZvbnRlbGxvLmNzcycgdHlwZT0ndGV4dC9jc3MnIG1lZGlhPSdhbGwnIC8+CiAgICAgICAgPGxpbmsgcmVsPSdzdHlsZXNoZWV0JyBocmVmPSdzaGFyZS9zdHlsZXMuY3NzJyB0eXBlPSd0ZXh0L2NzcycgbWVkaWE9J2FsbCcgLz4KICAgICAgCgk8bGluayByZWw9J3N0eWxlc2hlZXQnIGlkPSdnb29nbGUtZm9udHMtMi1jc3MnICBocmVmPSdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UFQrU2Fuczo0MDAsNzAwJnN1YnNldD1sYXRpbixsYXRpbi1leHQnIHR5cGU9J3RleHQvY3NzJyBtZWRpYT0nYWxsJyAvPiAKCTxsaW5rIHJlbD0nc3R5bGVzaGVldCcgaWQ9J3N0eWxlLWNzcycgIGhyZWY9J2Nzc19uZXcvc3R5bGUuY3NzJyB0eXBlPSd0ZXh0L2NzcycgbWVkaWE9J2FsbCcgLz4KICAgICAgICA8bGluayByZWw9J3N0eWxlc2hlZXQnIGlkPSdyZXNldC1jc3MnICBocmVmPSdjc3NfbmV3L3Jlc2V0LmNzcz92ZXI9My43LjEnIHR5cGU9J3RleHQvY3NzJyBtZWRpYT0nYWxsJyAvPgogICAgICAgIDxsaW5rIHJlbD0nc3R5bGVzaGVldCcgaWQ9J21haW4tc3R5bGVzaGVldC1jc3MnICBocmVmPSdjc3NfbmV3L21haW4tc3R5bGVzaGVldC5jc3MnIHR5cGU9J3RleHQvY3NzJyBtZWRpYT0nYWxsJyAvPgogICAgICAgIDxsaW5rIHJlbD0nc3R5bGVzaGVldCcgaWQ9J3Nob3J0Y29kZXMtY3NzJyAgaHJlZj0nY3NzX25ldy9zaG9ydGNvZGUuY3NzJyB0eXBlPSd0ZXh0L2NzcycgbWVkaWE9J2FsbCcgLz4KICAgICAgICA8bGluayByZWw9J3N0eWxlc2hlZXQnIGlkPSdsaWdodGJveC1jc3MnICBocmVmPSdjc3NfbmV3L2xpZ2h0Ym94LmNzcycgdHlwZT0ndGV4dC9jc3MnIG1lZGlhPSdhbGwnIC8+CiAgICAgICAgPGxpbmsgcmVsPSdzdHlsZXNoZWV0JyBpZD0nZm9udHMtY3NzJyAgaHJlZj0nY3NzX25ldy9mb250cy5jc3MnIHR5cGU9J3RleHQvY3NzJyBtZWRpYT0nYWxsJyAvPgogICAgICAgIDxsaW5rIHJlbD0nc3R5bGVzaGVldCcgaWQ9J2R5bmFtaWMtY3NzLWNzcycgIGhyZWY9J2Nzc19uZXcvZHluYW1pYy5jc3MnIHR5cGU9J3RleHQvY3NzJyBtZWRpYT0nYWxsJyAvPiAgICAgICAgCiAgICAgICAgPGxpbmsgcmVsPSdzdHlsZXNoZWV0JyBocmVmPSdjc3NfbmV3L2ZvbnQtYXdlc29tZS5jc3MnIHR5cGU9J3RleHQvY3NzJyBtZWRpYT0nYWxsJyAvPgogICAgICAgIAoKCTxsaW5rIHJlbD0nc3R5bGVzaGVldCcgaHJlZj0nY3NzX25ldy93My5jc3MnIHR5cGU9J3RleHQvY3NzJyBtZWRpYT0nYWxsJyAvPiAgICAgICAgIDwhLS1baWYgSUUgN10+CiAgICAgICAgICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImNzc19uZXcvaWU3LmNzcyIgdHlwZT0idGV4dC9jc3MiPgogICAgICAgIDwhW2VuZGlmXS0tPgogICAgICAgIDwhLS1baWYgSUUgOF0+CiAgICAgICAgICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImNzc19uZXcvaWU4LmNzcyIgdHlwZT0idGV4dC9jc3MiPgogICAgICAgIDwhW2VuZGlmXS0tPgogICAgICAKICAgICAgICA8IS0tIEpTIC0tPgogICAgICAgIDxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4KICAgICAgICAgICAgLyogPCFbQ0RBVEFbICovCiAgICAgICAgICAgIHZhciBvdCA9IHsiYWRtaW5VcmwiOiAnLycsICJnYWxsZXJ5X2lkIjogIiIsICJnYWxsZXJ5Q2F0IjogIiIsICJpbWFnZVVybCI6ICdpbWFnZXMvJywgImNzc1VybCI6ICdjc3NfbmV3LycsICJ0aGVtZVVybCI6ICcvJ307CiAgICAgICAgICAgIC8qIF1dPiAqLwogICAgICAgIDwvc2NyaXB0PgogICAgICAgIDxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9Jy9qcy9qcXVlcnkvanF1ZXJ5LmpzJz48L3NjcmlwdD4KICAgICAgICA8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+IAogICAgICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsgCiAgICAgICAgICAgICAgICBpZiAoIGpRdWVyeS5icm93c2VyLm1vemlsbGEgKSB7ICAKICAgICAgICAgICAgICAgICAgICBqUXVlcnkoImhlYWQiKS5hcHBlbmQoJzxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD0xMjIwLCBpbml0aWFsLXNjYWxlPW5vIj4nKTsgCiAgICAgICAgICAgICAgICB9IAogICAgICAgICAgICB9KTsKICAgICAgICA8L3NjcmlwdD4gCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnIHNyYz0nL2pzL2pxdWVyeS9qcXVlcnktbWlncmF0ZS5taW4uanMnPjwvc2NyaXB0PgoKCTxzY3JpcHQgc3JjPSIvL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8yLjEuNC9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KCiAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICAgdmFyIGZ1Y2tBZEJsb2NrID0gdW5kZWZpbmVkLCBGdWNrQWRCbG9jayA9IHVuZGVmaW5lZDsKICAgIAkgICAgdmFyIEFkQmxvY2tUZXN0ID0gZmFsc2U7CiAgICAJICAgIHZhciBibG9ja3N0YXR1cyA9IDA7CiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgCgk8c2NyaXB0IHNyYz0iLi9qc19uZXcvYmxvY2suanMiIGludGVncml0eT0ic2hhMjU2LWZsbGxwdXRvSHZYNHBaMnMxdWpJSmozTHUxRXVSQjVUTCs2VUtwREV4K289Ij48L3NjcmlwdD4KCTxzY3JpcHQ+CgkgICAgdmFyIGFkQmxvY2tEZXRlY3RlZCA9IGZ1bmN0aW9uKCkgewoJCSQoIiNhZGJsb2Nrc3RhdHVzIikudGV4dCgneWVzJyk7CgkJLy9hbGVydCgkKCAiI2FkYmxvY2tzdGF0dXMiICkudGV4dCgpKTsKCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2FybmluZycpLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7CgkJLy9hbGVydCgkKCIjd2FybmluZyIpLnRleHQoKTsKCSAgICB9CgkgICAgdmFyIGFkQmxvY2tVbmRldGVjdGVkID0gZnVuY3Rpb24oKSB7CgkJJCgiI2FkYmxvY2tzdGF0dXMiKS50ZXh0KCdubycpOwoJCQoJCS8vYWxlcnQoJCggIiNhZGJsb2Nrc3RhdHVzIiApLnRleHQoKSk7CgkgICAgfQoJICAgIGlmKHR5cGVvZiAgRnVja0FkQmxvY2sgPT09ICd1bmRlZmluZWQnKSB7CgkJJChkb2N1bWVudCkucmVhZHkoYWRCbG9ja0RldGVjdGVkKTsKCSAgICB9IGVsc2UgewoJCWZ1Y2tBZEJsb2NrLm9uKHRydWUsIGFkQmxvY2tEZXRlY3RlZCkub24oZmFsc2UsIGFkQmxvY2tVbmRldGVjdGVkKTsKCSAgICB9CgkgICAgLy8gSXQgcmVtb3ZlcyB0aGUgdmFyaWFibGUgImZ1Y2thZGJsb2NrIiBhbmQgIkZ1Y2tBZEJsb2NrCgkgICAgLy8gc28gdGhhdCBpdCBub3QgYmUgZXhwbG9pdGVkIGJ5IGFub3RoZXIgc2NyaXB0IGxhdGVyCgkgICAgLy8gYnV0IGJld2FyZSwgeW91IGNhbiBub3QgdXNlIGl0IHRvbyEKCSAgICAKCSAgICAKCSAgICBmdWNrQWRCbG9jayA9IHVuZGVmaW5lZDsKCQoJICAgIC8vIERvIG5vdCB1c2UgRnVja0FkQmxvY2sgb3V0c2lkZSB0aGlzIGFyZWEKCSAgICAvLyAoYmV0d2VlbiBpbXBvcnRpbmcgdGhlIHNjcmlwdCBhbmQgdGhlIGxpbmUgYWJvdmUpCgk8L3NjcmlwdD4KICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CnZhciB4bWxodHRwOwoKZnVuY3Rpb24gT3B0eWN6bmVBamF4KHdhcnRvc2Nfc2VsLGNlbCkKewp2YXIgZCA9IG5ldyBEYXRlKCk7CnZhciBzdGFydCA9IGQuZ2V0VGltZSgpOwovL2FsZXJ0KHN0YXJ0KTsKdmFyIHdhcnRvc2MgPSB3YXJ0b3NjX3NlbDsKdmFyIHVybD1zZXRfdXJsKHdhcnRvc2Nfc2VsLGNlbCk7CnhtbGh0dHA9bnVsbDsKaWYgKHdpbmRvdy5YTUxIdHRwUmVxdWVzdCkKICB7Ly8gY29kZSBmb3IgRmlyZWZveCwgT3BlcmEsIElFNywgZXRjLgogIHhtbGh0dHA9bmV3IFhNTEh0dHBSZXF1ZXN0KCk7CQogIH0KZWxzZSBpZiAod2luZG93LkFjdGl2ZVhPYmplY3QpCiAgey8vIGNvZGUgZm9yIElFNiwgSUU1CiAgeG1saHR0cD1uZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTsKICB9CmlmICh4bWxodHRwIT1udWxsKQogIHsKICB4bWxodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZT1zdGF0ZV9DaGFuZ2U7CiAgeG1saHR0cC5vcGVuKCJHRVQiLHVybCx0cnVlKTsKICB4bWxodHRwLnNlbmQobnVsbCk7CiAgfQplbHNlCiAgewogIGFsZXJ0KCJZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBYTUxIVFRQLiIpOwogIH0KfQoKZnVuY3Rpb24gc3RhdGVfQ2hhbmdlKCkKewp2YXIgZm9ybWE9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Zvcm1hJyk7CnZhciBvdXQ9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGVsJyk7CmlmICh4bWxodHRwLnJlYWR5U3RhdGU9PTQpCiAgey8vIDQgPSAibG9hZGVkIgogIGlmICh4bWxodHRwLnN0YXR1cz09MjAwKQogICAgey8vIDIwMCA9ICJPSyIKCS8vYWxlcnQoZm9ybWEuaW5uZXJIVE1MKTsKCS8vYWxlcnQoeG1saHR0cC5yZXNwb25zZVRleHQpOwogICAgCW91dC5pbm5lckhUTUw9IiciK3htbGh0dHAucmVzcG9uc2VUZXh0OwoJb3V0Lm91dGVySFRNTD1vdXQub3V0ZXJIVE1MOwoJLy9hbGVydChvdXQuaW5uZXJIVE1MKTsgICAgCn0KICBlbHNlCiAgICB7CiAgICBhbGVydCgiUHJvYmxlbSByZXRyaWV2aW5nIGRhdGE6IiArIHhtbGh0dHAuc3RhdHVzVGV4dCk7CiAgICB9CiAgfQp9CgoKZnVuY3Rpb24gc2V0X3VybCh3YXJ0b3NjX3NlbCxjZWwpCnsKdmFyIHRva2Vuc2lkPSIzOGM1MzBlNzJkNTVmOTJjZDE4MDcwNjRlMmFjMmFkOGQ4MDU2NGFlM2EzOWNjNGYzMGVhOTM2Y2Q4NjhkMWM4ZmI3NTA3MjUzODg0ZDAyOSIKdmFyIHVybD0iIjsKCmlmIChjZWw9PSJvYmlla3R5dyIpCnsKdmFyIGQgPSBuZXcgRGF0ZSgpOwp2YXIgc3RhcnQgPSBkLmdldFRpbWUoKTsKdmFyIHB0ZXN0PSIiOwppZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByemV0ZXN0JykuY2hlY2tlZCkgcHRlc3Q9IiZwcnpldGVzdD0xIjsKdmFyIHByb2Q9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2R1Y2VudCcpLm9wdGlvbnNbZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2R1Y2VudCcpLnNlbGVjdGVkSW5kZXhdLnZhbHVlOwp2YXIgdHlwPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0eXAnKS5vcHRpb25zW2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0eXAnKS5zZWxlY3RlZEluZGV4XS52YWx1ZTsKdmFyIG1vYz1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9jJykub3B0aW9uc1tkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9jJykuc2VsZWN0ZWRJbmRleF0udmFsdWU7CnVybD0iYWpheC5waHA/Y2VsPW9iaWVrdHl3eSZwcm9kdWNlbnQ9Iitwcm9kKyImb2JpZWt0eXc9Iit3YXJ0b3NjX3NlbCsiJnR5cD0iK3R5cCsiJm1vYz0iK21vYysiJnR5cF9wb2xhPW1vZGVsIitwdGVzdCsiJnRva2VuPSIrc3RhcnQ7Cn0KCmlmIChjZWw9PSJ0ZXN0X29iaWVrdHl3IikKewp2YXIgZCA9IG5ldyBEYXRlKCk7CnZhciBzdGFydCA9IGQuZ2V0VGltZSgpOwp2YXIgcHRlc3Q9IiI7CnB0ZXN0PSImcHJ6ZXRlc3Q9MSI7CnZhciBwcm9kPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9kdWNlbnQnKS5vcHRpb25zW2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9kdWNlbnQnKS5zZWxlY3RlZEluZGV4XS52YWx1ZTsKdmFyIHR5cD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHlwJykub3B0aW9uc1tkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHlwJykuc2VsZWN0ZWRJbmRleF0udmFsdWU7CnZhciBtb2M9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vYycpLm9wdGlvbnNbZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vYycpLnNlbGVjdGVkSW5kZXhdLnZhbHVlOwp1cmw9ImFqYXgucGhwP2NlbD10ZXN0X29iaWVrdHl3JnByb2R1Y2VudD0iK3Byb2QrIiZvYmlla3R5dz0iK3dhcnRvc2Nfc2VsKyImdHlwPSIrdHlwKyImbW9jPSIrbW9jKyImdHlwX3BvbGE9bW9kZWwiK3B0ZXN0KyImdG9rZW49IitzdGFydDsKfQoKCgppZiAoY2VsPT0iYXBhcmF0IikKewp2YXIgZCA9IG5ldyBEYXRlKCk7CnZhciBzdGFydCA9IGQuZ2V0VGltZSgpOwp2YXIgcHRlc3Q9IiI7CmlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJ6ZXRlc3QnKS5jaGVja2VkKSBwdGVzdD0iJnByemV0ZXN0PTEiOwp2YXIgcHJvZD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZHVjZW50Jykub3B0aW9uc1tkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZHVjZW50Jykuc2VsZWN0ZWRJbmRleF0udmFsdWU7CnZhciBwaXg9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BpeCcpLm9wdGlvbnNbZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BpeCcpLnNlbGVjdGVkSW5kZXhdLnZhbHVlOwp2YXIgem9vbT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnem9vbScpLm9wdGlvbnNbZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3pvb20nKS5zZWxlY3RlZEluZGV4XS52YWx1ZTsKdmFyIHR5cD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHlwJykub3B0aW9uc1tkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHlwJykuc2VsZWN0ZWRJbmRleF0udmFsdWU7CnVybD0iYWpheC5waHA/Y2VsPWFwYXJhdCZwcm9kdWNlbnQ9Iitwcm9kKyImYXBhcmF0PSIrd2FydG9zY19zZWwrIiZwaXg9IitwaXgrIiZ6b29tPSIrem9vbSsiJnR5cD0iK3R5cCsiJnR5cF9wb2xhPW1vZGVsIitwdGVzdCsiJnRva2VuPSIrc3RhcnQ7Cn0KCmlmIChjZWw9PSJ0ZXN0X2FwYXJhdCIpCnsKdmFyIGQgPSBuZXcgRGF0ZSgpOwp2YXIgc3RhcnQgPSBkLmdldFRpbWUoKTsKdmFyIHB0ZXN0PSIiOwpwdGVzdD0iJnByemV0ZXN0PTEiOwp2YXIgcHJvZD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZHVjZW50Jykub3B0aW9uc1tkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZHVjZW50Jykuc2VsZWN0ZWRJbmRleF0udmFsdWU7CnZhciBwaXg9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BpeCcpLm9wdGlvbnNbZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BpeCcpLnNlbGVjdGVkSW5kZXhdLnZhbHVlOwp2YXIgem9vbT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnem9vbScpLm9wdGlvbnNbZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3pvb20nKS5zZWxlY3RlZEluZGV4XS52YWx1ZTsKdmFyIHR5cD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHlwJykub3B0aW9uc1tkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHlwJykuc2VsZWN0ZWRJbmRleF0udmFsdWU7CnVybD0iYWpheC5waHA/Y2VsPXRlc3RfYXBhcmF0JnByb2R1Y2VudD0iK3Byb2QrIiZhcGFyYXQ9Iit3YXJ0b3NjX3NlbCsiJnBpeD0iK3BpeCsiJnpvb209Iit6b29tKyImdHlwPSIrdHlwKyImdHlwX3BvbGE9bW9kZWwiK3B0ZXN0KyImdG9rZW49IitzdGFydDsKfQoKCgppZiAoY2VsPT0ibG9ybmV0a2EiKQp7CnZhciBkID0gbmV3IERhdGUoKTsKdmFyIHN0YXJ0ID0gZC5nZXRUaW1lKCk7CnZhciBwdGVzdD0iIjsKaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcnpldGVzdCcpLmNoZWNrZWQpIHB0ZXN0PSImcHJ6ZXRlc3Q9MSI7CnZhciBwcm9kPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9kdWNlbnQnKS5vcHRpb25zW2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9kdWNlbnQnKS5zZWxlY3RlZEluZGV4XS52YWx1ZTsKdmFyIHBvd2lla3N6ZW5pZT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG93aWVrc3plbmllJykub3B0aW9uc1tkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG93aWVrc3plbmllJykuc2VsZWN0ZWRJbmRleF0udmFsdWU7CnZhciBzcmVkbmljYT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3JlZG5pY2EnKS5vcHRpb25zW2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzcmVkbmljYScpLnNlbGVjdGVkSW5kZXhdLnZhbHVlOwp2YXIgcHJ5em1hdD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJ5em1hdCcpLm9wdGlvbnNbZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByeXptYXQnKS5zZWxlY3RlZEluZGV4XS52YWx1ZTsKdXJsPSJhamF4LnBocD9jZWw9bG9ybmV0a2EmcHJvZHVjZW50PSIrcHJvZCsiJmxvcm5ldGthPSIrd2FydG9zY19zZWwrIiZwb3dpZWtzemVuaWU9Iitwb3dpZWtzemVuaWUrIiZzcmVkbmljYT0iK3NyZWRuaWNhKyImcHJ5em1hdD0iK3ByeXptYXQrIiZ0eXBfcG9sYT1tb2RlbCIrcHRlc3QrIiZ0b2tlbj0iK3N0YXJ0Owp9CgppZiAoY2VsPT0idGVzdF9sb3JuZXRrYSIpCnsKdmFyIGQgPSBuZXcgRGF0ZSgpOwp2YXIgc3RhcnQgPSBkLmdldFRpbWUoKTsKdmFyIHB0ZXN0PSIiOwpwdGVzdD0iJnByemV0ZXN0PTEiOwp2YXIgcHJvZD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZHVjZW50Jykub3B0aW9uc1tkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZHVjZW50Jykuc2VsZWN0ZWRJbmRleF0udmFsdWU7CnZhciBwb3dpZWtzemVuaWU9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvd2lla3N6ZW5pZScpLm9wdGlvbnNbZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvd2lla3N6ZW5pZScpLnNlbGVjdGVkSW5kZXhdLnZhbHVlOwp2YXIgc3JlZG5pY2E9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NyZWRuaWNhJykub3B0aW9uc1tkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3JlZG5pY2EnKS5zZWxlY3RlZEluZGV4XS52YWx1ZTsKdmFyIHByeXptYXQ9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByeXptYXQnKS5vcHRpb25zW2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcnl6bWF0Jykuc2VsZWN0ZWRJbmRleF0udmFsdWU7CnVybD0iYWpheC5waHA/Y2VsPXRlc3RfbG9ybmV0a2EmcHJvZHVjZW50PSIrcHJvZCsiJmxvcm5ldGthPSIrd2FydG9zY19zZWwrIiZwb3dpZWtzemVuaWU9Iitwb3dpZWtzemVuaWUrIiZzcmVkbmljYT0iK3NyZWRuaWNhKyImcHJ5em1hdD0iK3ByeXptYXQrIiZ0eXBfcG9sYT1tb2RlbCIrcHRlc3QrIiZ0b2tlbj0iK3N0YXJ0Owp9CmlmKHVybCE9IiIpIHVybCs9IiZ0b2tlbnNpZD0iK3Rva2Vuc2lkOwoKcmV0dXJuIHVybDsKfQoKZnVuY3Rpb24gZ19sbCgpCnsKdmFyIHd5Yj0iYWxsIjsKLy92YXIgd3liPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kZWwnKS5vcHRpb25zW2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RlbCcpLnNlbGVjdGVkSW5kZXhdLnZhbHVlOwpyZXR1cm4gd3liOwp9CgoKZnVuY3Rpb24gdGVzdF9hcF9nbygpCnsKdmFyIHRtb2RlbD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kZWwnKS5vcHRpb25zW2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RlbCcpLnNlbGVjdGVkSW5kZXhdLnZhbHVlOwovL2FsZXJ0KHRtb2RlbCk7CmlmKHRtb2RlbCE9JycpIAp7CglpZih0bW9kZWwubWF0Y2goInRlc3RfYXAiKSE9bnVsbCkgCgl7CgkJdmFyIHRhYj10bW9kZWwuc3BsaXQoInRlc3RfYXAiKTsKCQkvL2FsZXJ0KHRhYlsxXSkKCQl3aW5kb3cubG9jYXRpb249J2luZGV4Lmh0bWw/dGVzdD1hcGFyYXQmdGVzdF9hcD0nK3RhYlsxXTsKCX0KCWlmKHRtb2RlbC5tYXRjaCgidGVzdF9zZXQiKSE9bnVsbCkgCgl7CgkJdmFyIHRhYj10bW9kZWwuc3BsaXQoInRlc3Rfc2V0Iik7CgkJLy9hbGVydCh0YWJbMV0pCgkJd2luZG93LmxvY2F0aW9uPSdpbmRleC5odG1sP3Rlc3Q9c2V0JnRlc3Rfc2V0PScrdGFiWzFdOwoJfQp9CmVsc2UgcmV0dXJuIGZhbHNlOwp9CmZ1bmN0aW9uIHRlc3Rfb2JfZ28oKQp7CnZhciB0bW9kZWw9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGVsJykub3B0aW9uc1tkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kZWwnKS5zZWxlY3RlZEluZGV4XS52YWx1ZTsKLy9hbGVydCh0bW9kZWwpOwppZih0bW9kZWwhPScnKSAKewoJaWYodG1vZGVsLm1hdGNoKCJ0ZXN0X29iIikhPW51bGwpIAoJewoJCXZhciB0YWI9dG1vZGVsLnNwbGl0KCJ0ZXN0X29iIik7CgkJLy9hbGVydCh0YWJbMV0pCgkJd2luZG93LmxvY2F0aW9uPSdpbmRleC5odG1sP3Rlc3Q9b2JpZWt0eXd1JnRlc3Rfb2I9Jyt0YWJbMV07Cgl9CglpZih0bW9kZWwubWF0Y2goInRlc3Rfc2V0IikhPW51bGwpIAoJewoJCXZhciB0YWI9dG1vZGVsLnNwbGl0KCJ0ZXN0X3NldCIpOwoJCS8vYWxlcnQodGFiWzFdKQoJCXdpbmRvdy5sb2NhdGlvbj0naW5kZXguaHRtbD90ZXN0PXNldCZ0ZXN0X3NldD0nK3RhYlsxXTsKCX0KfQplbHNlIHJldHVybiBmYWxzZTsKfQoKPC9zY3JpcHQ+CiAKCgogCiAgICAgICAgPCEtLSBFTkQgaGVhZCAtLT4KICAgIDwvaGVhZD4KCjxib2R5ICBjbGFzcz0id3BiLWpzLWNvbXBvc2VyIGpzLWNvbXAtdmVyLTMuNi4xMyI+CjxzY3JpcHQ+CmZ1bmN0aW9uIHNldENvb2tpZShjbmFtZSwgY3ZhbHVlLCBleGRheXMpIHsKICAgIHZhciBkID0gbmV3IERhdGUoKTsKICAgIGQuc2V0VGltZShkLmdldFRpbWUoKSArIChleGRheXMqMjQqNjAqNjAqMTAwMCkpOwogICAgdmFyIGV4cGlyZXMgPSAiZXhwaXJlcz0iKyBkLnRvVVRDU3RyaW5nKCk7CiAgICBkb2N1bWVudC5jb29raWUgPSBjbmFtZSArICI9IiArIGN2YWx1ZSArICIgOyBkb21haW49IC5vcHR5Y3puZS5wbDsiICsgZXhwaXJlcyArICI7cGF0aD0vIjsKICAgIGxvY2F0aW9uLnJlbG9hZCgpOwp9CmZ1bmN0aW9uIGdldENvb2tpZShjbmFtZSkgewogICAgdmFyIG5hbWUgPSBjbmFtZSArICI9IjsKICAgIHZhciBkZWNvZGVkQ29va2llID0gZGVjb2RlVVJJQ29tcG9uZW50KGRvY3VtZW50LmNvb2tpZSk7CiAgICB2YXIgY2EgPSBkZWNvZGVkQ29va2llLnNwbGl0KCc7Jyk7CiAgICBmb3IodmFyIGkgPSAwOyBpIDxjYS5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBjID0gY2FbaV07CiAgICAgICAgd2hpbGUgKGMuY2hhckF0KDApID09ICcgJykgewogICAgICAgICAgICBjID0gYy5zdWJzdHJpbmcoMSk7CiAgICAgICAgfQogICAgICAgIGlmIChjLmluZGV4T2YobmFtZSkgPT0gMCkgewogICAgICAgICAgICByZXR1cm4gYy5zdWJzdHJpbmcobmFtZS5sZW5ndGgsIGMubGVuZ3RoKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gIiI7Cn0KZnVuY3Rpb24gY2hlY2tDb29raWUoKSB7CiAgICB2YXIgc3ByX3BvbGl0eWthID0gZ2V0Q29va2llKCJwb2xpdHlrYSIpOwogICAgLy9hbGVydChzcHJfcG9saXR5a2EpOwogICAgaWYgKHNwcl9wb2xpdHlrYSAhPSAxKSB7CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZDAxJykuc3R5bGUuZGlzcGxheT0nYmxvY2snOwogICAgfQogICAgCn0gCjwvc2NyaXB0Pgo8ZGl2IGlkPSJpZDAxIiBjbGFzcz0idzMtbW9kYWwiPgogPGRpdiBjbGFzcz0idzMtbW9kYWwtY29udGVudCB3My1jYXJkLTQgdzMtYW5pbWF0ZS16b29tIj4KICA8aGVhZGVyIGNsYXNzPSJ3My1jb250YWluZXIgdzMtcmVkIj4gCiAgIDxoMT5QcnpldHdhcnphbmllIGRhbnljaCBvc29ib3d5Y2g8L2gxPgogIDwvaGVhZGVyPgoKICA8ZGl2IGlkPSIiIGNsYXNzPSJ3My1jb250YWluZXIiPgogIAogIDxoMj48cCBjbGFzcz0idzMteGxhcmdlIHczLXBhZGRpbmctMTYiPk5hc3phIHdpdHJ5bmEga29yenlzdGEgeiBwbGlr83cgY29va2llczwvcD48L2gyPgogIDxwIGNsYXNzPSJ3My1tZWRpdW0iPld5a29yenlzdHVqZW15IHBsaWtpIGNvb2tpZSBkbyBzcGVyc29uYWxpem93YW5pYSB0cmW2Y2kgaSByZWtsYW0sIGFieSBvZmVyb3dh5iBmdW5rY2plIHNwb7NlY3pub7ZjaW93ZSBpIGFuYWxpem93YeYgcnVjaCB3IG5hc3plaiB3aXRyeW5pZSwgYSB0YWu/ZSBkbyBwcmF3aWSzb3dlZ28gZHppYbNhbmlhIGkgd3lnb2RuaWVqc3plaiBvYnOzdWdpLiBJbmZvcm1hY2plIG8gdHltLCBqYWsga29yenlzdGFzeiB6IG5hc3plaiB3aXRyeW55LCB1ZG9zdOpwbmlhbXkgcGFydG5lcm9tIHNwb7NlY3pub7ZjaW93eW0sIHJla2xhbW93eW0gaSBhbmFsaXR5Y3pueW0uIFBhcnRuZXJ6eSBtb2exIHBvs7FjennmIHRlIGluZm9ybWFjamUgeiBpbm55bWkgZGFueW1pIG90cnp5bWFueW1pIG9kIENpZWJpZSBsdWIgdXp5c2thbnltaSBwb2RjemFzIGtvcnp5c3RhbmlhIHogaWNoIHVzs3VnIGkgaW5ueWNoIHdpdHJ5bi48L3A+CiAgPHAgY2xhc3M9InczLW1lZGl1bSI+TWFzeiBtb79saXdvtuYgem1pYW55IHByZWZlcmVuY2ppIGRvdHljerFjeWNoIGNpYXN0ZWN6ZWsgdyBzd29qZWogcHJ6ZWdssWRhcmNlIGludGVybmV0b3dlai4gSmW2bGkgd2nqYyBuaWUgd3lyYb9hc3ogemdvZHkgbmEgemFwaXN5d2FuaWUgcHJ6ZXogbmFzIHBsaWvzdyBjb29raWVzIHcgdHdvaW0gdXJ6sWR6ZW5pdSB6bWll8SB1c3Rhd2llbmlhIHN3b2plaiBwcnplZ2yxZGFya2ksIGx1YiBvcHW25iBuYXN6sSB3aXRyeW7qLjwvcD4KICA8cCBjbGFzcz0idzMtbWVkaXVtIj5KZb9lbGkgbmllIHptaWVuaXN6IHR5Y2ggdXN0YXdpZfEgaSBi6mR6aWVzeiBuYWRhbCBrb3J6eXN0YbMgeiBuYXN6ZWogd2l0cnlueSwgYupkemllbXkgcHJ6ZXR3YXJ6YeYgVHdvamUgZGFuZSB6Z29kbmllIHogbmFzerEgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vb3B0eWN6bmUucGwvcG9saXR5a2FfcHJ5d2F0bm9zY2kucGRmIj5Qb2xpdHlrsSBQcnl3YXRub7ZjaTwvYT4uIFcgZG9rdW1lbmNpZSB0eW0gem5hamR6aWVzeiB0Zb8gd2nqY2VqIGluZm9ybWFjamkgbmEgdGVtYXQgdXN0YXdpZfEgcHJ6ZWdssWRhcmtpIGkgc3Bvc29idSBwcnpldHdhcnphbmlhIHR3b2ljaCBkYW55Y2ggcHJ6ZXogbmFzenljaCBwYXJ0bmVy83cgc3Bvs2Vjem5vtmNpb3d5Y2gsIHJla2xhbW93eWNoIGkgYW5hbGl0eWN6bnljaC48L3A+CiAgPHAgY2xhc3M9InczLW1lZGl1bSI+WmdvZOogbmEgd3lrb3J6eXN0eXdhbmllIHByemV6IG5hcyBwbGlr83cgY29va2llcyBtb79lc3ogY29mbrHmIHcgZG93b2xueW0gbW9tZW5jaWUuPC9wPgogIAogIDwvZGl2PgogIAogIDxkaXYgY2xhc3M9InczLWNvbnRhaW5lciB3My1saWdodC1ncmV5IHczLXBhZGRpbmciPgogICA8YnV0dG9uIGNsYXNzPSJ3My1idXR0b24gdzMtcmlnaHQgdzMtd2hpdGUgdzMtYm9yZGVyIiAKICAgb25jbGljaz0iZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lkMDEnKS5zdHlsZS5kaXNwbGF5PSdub25lJztzZXRDb29raWUoJ3BvbGl0eWthJywxLDkwMCk7Ij48Yj5DSEPKIEtPUlpZU1RBxiBaIFNFUldJU1U8L2I+PC9idXR0b24+CiAgPC9kaXY+CiA8L2Rpdj4KPC9kaXY+CjxzY3JpcHQ+CmNoZWNrQ29va2llKCk7Cjwvc2NyaXB0PgogICAgICAgIAogICAgICAgIDwhLS0gQkVHSU4gLmJveGVkIC0tPgogICAgICAgIDxkaXYgY2xhc3M9ImJveGVkIj4KCiAgICAgICAgICAgIDwhLS0gQkVHSU4gLmhlYWRlciAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPCEtLSBCRUdJTiAuaGVhZGVyLW1pZGRsZSAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1taWRkbGUiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9nby1pbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+T3B0eWN6bmUucGw8L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvIj48aW1nIGNsYXNzPSJsb2dvIiBzcmM9ImltYWdlcy9sb2dvLW9wdHljem5lLnBuZyIgYWx0PSJPcHR5Y3puZS5wbCIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmlnaHQgbWVudS1zZWFyY2giPgogICAgICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IGxhbmd1YWdlPSJKYXZhU2NyaXB0Ij4KZnVuY3Rpb24gbWluaW1hbChmb3JtYSkKewppZihmb3JtYS5zLnZhbHVlLmxlbmd0aDwzKQp7CglhbGVydCgiRnJhemEgZG8gd3lzenVrYW5pYSBtdXNpIG1pZeYgbWluaW11bSAzIHpuYWtpISEhIik7CglyZXR1cm4gZmFsc2U7CQp9CmVsc2UKewoJcmV0dXJuIHRydWU7Cn0KfQo8L3NjcmlwdD4gCgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG5hbWU9InNlYXJjaGZvcm0iIGFjdGlvbj0ic3p1a2FqLmh0bWwiIG1ldGhvZD0iUE9TVCI+CgkJCQk8aW5wdXQgdHlwZT0idGV4dCIgaWQ9InMiIG5hbWU9InMiIHBsYWNlaG9sZGVyPSJTenVrYWogLi4uIiB2YWx1ZT0iIj4KCQkJCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InFxIiAvPgoJCQkJPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IiZuYnNwOyIgY2xhc3M9InNlYXJjaC1idXR0b24iIG9uY2xpY2s9InJldHVybiBtaW5pbWFsKHRoaXMuZm9ybSkiIG9ua2V5cHJlc3M9InJldHVybiBtaW5pbWFsKHRoaXMuZm9ybSkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgoJCQk8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ib3QtbWVudSB2ZXJ5LXRvcC1tZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL3d3dy5sZW5zdGlwLmNvbS8iPjxpbWcgc3JjPSIvaW1hZ2VzL2xlbnN0aXAucG5nIiAvPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmFsbGJpbm9zLmNvbS8iPjxpbWcgc3JjPSIvaW1hZ2VzL2FsbGJpbm9zLnBuZyIgLz48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UiPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsL3JlZGFrY2phLmh0bWwiPlJlZGFrY2phPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIj48YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC9yZWtsYW1hLmh0bWwiPlJla2xhbWE8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UiPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsL2tvbnRha3QuaHRtbCI+S29udGFrdDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvcnNzLnhtbCI+UlNTPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gQkVHSU4gLmhlYWRlci1sb2dpbiAtLT4KCQkJPGRpdiBjbGFzcz0iaGVhZGVyLWxvZ2luIj4gCgkJCQk8dWw+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvemFsb2d1ai5odG1sIj5aYWxvZ3VqPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL2ZvcnVtLm9wdHljem5lLnBsL3Byb2ZpbGUucGhwP21vZGU9cmVnaXN0ZXIiPlphcmVqZXN0cnVqPC9hPjwvbGk+CgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4JCQkJCQkKCQkJCTxkaXYgY2xhc3M9ImNsZWFyLWZsb2F0Ij48L2Rpdj4KCgkJCTwhLS0gRU5EIC5oZWFkZXItbG9naW4gLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwhLS0gRU5EIC5oZWFkZXItbWlkZGxlIC0tPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPCEtLSBCRUdJTiAuaGVhZGVyLW1lbnUgLS0+CjxkaXYgY2xhc3M9ImhlYWRlci1tZW51Ij4KICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgICAgIDx1bCBjbGFzcz0ibWVudSBtYWluLW1lbnUiID4KICAgICAgICAgICAgPGxpIGlkPSJtZW51LWl0ZW0tMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMDAwMDsgY29sb3I6IzAwMDAwMDsiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBjdXJyZW50LW1lbnUtaXRlbSBwYWdlX2l0ZW0gcGFnZS1pdGVtLTAgY3VycmVudF9wYWdlX2l0ZW0gIj48YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC9pbmRleC5odG1sIj5Ba3R1YWxub7ZjaTwvYT48L2xpPgogICAgICAgICAgICA8bGkgaWQ9Im1lbnUtaXRlbS0xIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwMDAwOyBjb2xvcjojMDAwMDAwOyIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIGN1cnJlbnQtbWVudS1pdGVtIHBhZ2VfaXRlbSBwYWdlLWl0ZW0tMSBjdXJyZW50X3BhZ2VfaXRlbSAiPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsL1Rlc3R5X2FwYXJhdPN3X1Rlc3R5X29iaWVrdHl383dfVGVzdHlfbG9ybmV0ZWtfSW5uZV90ZXN0eS5odG1sIj5UZXN0eTwvYT48L2xpPgogICAgICAgICAgICA8bGkgaWQ9Im1lbnUtaXRlbS0yIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwMDAwOyBjb2xvcjojMDAwMDAwOyIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIGN1cnJlbnQtbWVudS1pdGVtIHBhZ2VfaXRlbSBwYWdlLWl0ZW0tMiBjdXJyZW50X3BhZ2VfaXRlbSAiPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsL2FydHlrdSVDNSU4MnkuaHRtbCI+QXJ0eWt1s3k8L2E+PC9saT4KICAgICAgICAgICAgPGxpIGlkPSJtZW51LWl0ZW0tNCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMDAwMDsgY29sb3I6IzAwMDAwMDsiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBjdXJyZW50LW1lbnUtaXRlbSBwYWdlX2l0ZW0gcGFnZS1pdGVtLTQgY3VycmVudF9wYWdlX2l0ZW0gYWN0aXZlIj48YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC9hcGFyYXR5Lmh0bWwiIHRpdGxlPSJBcGFyYXR5Ij5BcGFyYXR5PC9hPjwvbGk+CiAgICAgICAgICAgIDxsaSBpZD0ibWVudS1pdGVtLTUiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAwMDA7IGNvbG9yOiMwMDAwMDA7IiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgY3VycmVudC1tZW51LWl0ZW0gcGFnZV9pdGVtIHBhZ2UtaXRlbS01IGN1cnJlbnRfcGFnZV9pdGVtICI+PGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvb2JpZWt0eXd5Lmh0bWwiIHRpdGxlPSJPYmlla3R5d3kiPk9iaWVrdHl3eTwvYT48L2xpPgogICAgICAgICAgICA8bGkgaWQ9Im1lbnUtaXRlbS02IiBzdHlsZT0iYmFja2dyb3VuZDojMDAwMDAwOyBjb2xvcjojMDAwMDAwOyIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIGN1cnJlbnQtbWVudS1pdGVtIHBhZ2VfaXRlbSBwYWdlLWl0ZW0tNiBjdXJyZW50X3BhZ2VfaXRlbSAiPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsL2xvcm5ldGtpLmh0bWwiIHRpdGxlPSJMb3JuZXRraSI+TG9ybmV0a2k8L2E+PC9saT4KCSAgICA8bGkgaWQ9Im1lbnUtaXRlbS03IiBzdHlsZT0iYmFja2dyb3VuZDojMDAwMDAwOyBjb2xvcjojMDAwMDAwOyIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIGN1cnJlbnQtbWVudS1pdGVtIHBhZ2VfaXRlbSBwYWdlLWl0ZW0tNyBjdXJyZW50X3BhZ2VfaXRlbSAiPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsL3MlQzUlODJvd25pay5odG1sIiB0aXRsZT0iU7Nvd25pY3playI+U7Nvd25pY3plazwvYT48L2xpPgoJICAgIDxsaSBpZD0ibWVudS1pdGVtLTgiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAwMDA7IGNvbG9yOiMwMDAwMDA7IiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgY3VycmVudC1tZW51LWl0ZW0gcGFnZV9pdGVtIHBhZ2UtaXRlbS04IGN1cnJlbnRfcGFnZV9pdGVtICI+PGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvcmFua2luZy5odG1sIiB0aXRsZT0iUmFua2luZ2kiPlJhbmtpbmdpPC9hPjwvbGk+CgkgICAgPGxpIGlkPSJtZW51LWl0ZW0tOSIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMDAwMDsgY29sb3I6IzAwMDAwMDsiIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtcG9zdF90eXBlIG1lbnUtaXRlbS1vYmplY3QtcGFnZSBjdXJyZW50LW1lbnUtaXRlbSBwYWdlX2l0ZW0gcGFnZS1pdGVtLTkgY3VycmVudF9wYWdlX2l0ZW0gIj48YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC9mYXEuaHRtbCI+RkFRPC9hPjwvbGk+CgkgICAgPGxpIGlkPSJtZW51LWl0ZW0tMTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAwMDA7IGNvbG9yOiMwMDAwMDA7IiBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXBvc3RfdHlwZSBtZW51LWl0ZW0tb2JqZWN0LXBhZ2UgY3VycmVudC1tZW51LWl0ZW0gcGFnZV9pdGVtIHBhZ2UtaXRlbS0xMCBjdXJyZW50X3BhZ2VfaXRlbSAiPjxhIGhyZWY9Imh0dHBzOi8vZm9ydW0ub3B0eWN6bmUucGwiIHRhcmdldD0iX2JsYW5rIj5Gb3J1bTwvYT48L2xpPgoJICAgIDxsaSBpZD0ibWVudS1pdGVtLTExIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwMDAwOyBjb2xvcjojMDAwMDAwOyIgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIGN1cnJlbnQtbWVudS1pdGVtIHBhZ2VfaXRlbSBwYWdlLWl0ZW0tMTEgY3VycmVudF9wYWdlX2l0ZW0gIj48YSBocmVmPSJodHRwczovL2ZvdG9taXNqZS5vcHR5Y3puZS5wbC8iPkZvdG9taXNqZTwvYT48L2xpPiAgICAgICAKPC91bD4KCiAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXItZmxvYXQiPjwvZGl2PgoKICAgIDwvZGl2PgogICAgPCEtLSBFTkQgLmhlYWRlci1tZW51IC0tPgo8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAKCgoKICAgICAgICAgICAgICAgIDwhLS0gRU5EIC5oZWFkZXIgLS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgPCEtLSBCRUdJTiAuY29udGVudCAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCI+CgogICAgICAgICAgICAgICAgPCEtLSBCRUdJTiAud3JhcHBlciAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPjxkaXYgY2xhc3M9ImRvdWJsZS1iaWxsYm9hcmQiPgo8ZGl2IGNsYXNzPSJiYW5uZXIiPgogICAgPGRpdiBjbGFzcz0iYmFubmVyLWJsb2NrIj4KICAgICAgICAJIAogICAgPC9kaXY+ICAgIAo8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9Im1haW4tY29udGVudC1yaWdodCBzaWRlYmFyLWxlZnQxMiI+CgogICAgPCEtLSBCRUdJTiAubWFpbi1ub3NwbGl0IC0tPgogICAgPGRpdiBjbGFzcz0ibWFpbi1ub3NwbGl0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8ZGl2IGNsYXNzPSJmaXJzdCBwYW5lbCI+CiAgICAgICAgICAgIDxoMz5Gb3RvbWlzamEgT3B0eWN6bmUucGw8L2gzPgogICAgICAgICAgICA8ZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwhLS0gQkVHSU4gLmFydGljbGUtbWlkZGxlLWJsb2NrIC0tPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1zaWRlLWJsb2NrIj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1waG90byI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly9mb3RvbWlzamUub3B0eWN6bmUucGwvOTgtZm90b21pc2phLVdpb3NuYV93X05vd3ltX0pvcmt1Lmh0bWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0ic2V0Ym9yZGVyIiB0aXRsZT0iRm90b21pc2phIE9wdHljem5lLnBsIiBhbHQ9IkZvdG9taXNqYSBPcHR5Y3puZS5wbCIgc3JjPSJva25vX2ltYWdlLzQ2LmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48YSBocmVmPSJodHRwOi8vZm90b21pc2plLm9wdHljem5lLnBsLzk4LWZvdG9taXNqYS1XaW9zbmFfd19Ob3d5bV9Kb3JrdS5odG1sIiBjbGFzcz0iYXJ0aWNsZS1zdGF0dXMiPldvbG5lIG1pZWpzY2E8L2E+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyPjxhIGhyZWY9Imh0dHA6Ly9mb3RvbWlzamUub3B0eWN6bmUucGwvOTgtZm90b21pc2phLVdpb3NuYV93X05vd3ltX0pvcmt1Lmh0bWwiPlphcHJhc3phbXkgbmEgd2lvc2VubnkgcGxlbmVyIGRvIE5vd2VnbyBKb3JrdSB6IGZvdG9ncmFmZW0gUGF3s2VtIEtvc2lja2ltPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtbGlua3MiPjxhIGhyZWY9Imh0dHA6Ly9mb3RvbWlzamUub3B0eWN6bmUucGwvOTgtZm90b21pc2phLVdpb3NuYV93X05vd3ltX0pvcmt1Lmh0bWwiIGNsYXNzPSJhcnRpY2xlLWljb24tbGluayI+PGkgY2xhc3M9ImZhIGZhLWZhIGZhLXBsYW5lIj48L2k+V2nqY2VqIG8gZm90b21pc2ppPC9hPjwvZGl2PgoJICAgICAgCiAgICAgICAgICAgICAgICAgICAgPCEtLSBFTkQgLmFydGljbGUtbWlkZGxlLWJsb2NrIC0tPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJiYW5uZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFubmVyLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIj4KICAgICAgICAgICAgPGgzPlBhcnRuZXJ6eTwvaDM+CiAgICAgICAgICAgIDxkaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPCEtLSBCRUdJTiAuYXJ0aWNsZS1taWRkbGUtYmxvY2sgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXNpZGUtYmxvY2siPgo8ZGl2IGNsYXNzPSJhcnRpY2xlLXBob3RvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9mb3Rvam9rZXIucGwiICB0YXJnZXQ9Il9ibGFuayI+PGltZyBzcmM9InBhcnRuZXJ6eS9Gb3RvSm9rZXIucG5nIj48L2E+PGJyPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj48ZGl2IGNsYXNzPSJhcnRpY2xlLXBob3RvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9jeWZyb3dlLnBsIiAgdGFyZ2V0PSJfYmxhbmsiPjxpbWcgc3JjPSJwYXJ0bmVyenkvY3lmcm93ZV9wbC5wbmciPjwvYT48YnI+CgogICAgICAgICAgICAgICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9ImFydGljbGUtcGhvdG8iPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2ZvdG9mb3JtYS5wbCIgdGFyZ2V0PSJfYmxhbmsiPjxJTUcgc3JjPSJwYXJ0bmVyenkvbG9nby1mb3RvZm9ybWEucGwucG5nIj48L2E+PGJyPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj48ZGl2IGNsYXNzPSJhcnRpY2xlLXBob3RvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9mb3RvcGx1cy5wbC8/dXRtX3NvdXJjZT1vcHR5Y3puZSZ1dG1fbWVkaXVtPWJhbmVyJnV0bV9jYW1wYWlnbj1QYXJ0bmVyT3B0eWN6bmUiIHRhcmdldD0iX2JsYW5rIj48SU1HIHNyYz0icGFydG5lcnp5L0xvZ29fRk9UTy1QTFVTLnBuZyI+PC9hPjxicj4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iYXJ0aWNsZS1waG90byI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJlaWtzLnBsIiAgdGFyZ2V0PSJfYmxhbmsiPjxpbWcgc3JjPSJwYXJ0bmVyenlfc20vYmVpa3MuanBnIj48L2E+PGJyPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj48ZGl2IGNsYXNzPSJhcnRpY2xlLXBob3RvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9lLW9rby5wbC8iICB0YXJnZXQ9Il9ibGFuayI+PGltZyBzcmM9InBhcnRuZXJ6eS9sb2dvX2Vva29fdjEucG5nIj48L2E+PGJyPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj48ZGl2IGNsYXNzPSJhcnRpY2xlLXBob3RvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9hYmZvdG8ucGwiICB0YXJnZXQ9Il9ibGFuayI+PGltZyBzcmM9InBhcnRuZXJ6eS9sb2dvLWFiLWZvdG8ucG5nIj48L2E+PGJyPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4JCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPCEtLSBFTkQgLmFydGljbGUtbWlkZGxlLWJsb2NrIC0tPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9InNob3Atb2ZmZXIgcGFuZWwiPgogICAgICAgICAgICA8aDM+T2ZlcnRhIEN5ZnJvd2UucGw8L2gzPgogICAgICAgICAgICA8ZGl2PiAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPCEtLSBCRUdJTiAuYXJ0aWNsZS1taWRkbGUtYmxvY2sgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXNpZGUtYmxvY2siPgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXBob3RvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LmN5ZnJvd2UucGwvYXBhcmF0LWN5ZnJvd3ktbmlrb24tejZpaWktYm9keS1wLmh0bWw/dXRtX3NvdXJjZT1vcHR5Y3puZS5wbCZ1dG1fbWVkaXVtPXJlZmVycmFsJnV0bV9jYW1wYWlnbj1jYW5vbl84OTY5NSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJzZXRib3JkZXIiIHNyYz0iaHR0cHM6Ly91cGxvYWQuY3lmcm93ZS5wbC9jeWZyb3dlL3Bob3Rvcy82NjcwM2ExMzY4OTdlLmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cuY3lmcm93ZS5wbC9hcGFyYXQtY3lmcm93eS1uaWtvbi16NmlpaS1ib2R5LXAuaHRtbD91dG1fc291cmNlPW9wdHljem5lLnBsJnV0bV9tZWRpdW09cmVmZXJyYWwmdXRtX2NhbXBhaWduPWNhbm9uXzg5Njk1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwYXJhdCBjeWZyb3d5IE5pa29uIFo2IElJSSBib2R5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtbGlua3MiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpY2UiPkNlbmE6IDxzcGFuIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb24gOiBsaW5lLXRocm91Z2g7Ij4gMTEzNjkgIHqzPC9zcGFuPjxzcGFuIHN0eWxlPSJmb250LXNpemU6IDE0cHg7IGZvbnQtd2VpZ2h0IDogYm9sZDsgY29sb3I6ICNCRTE2MDA7Ij4gIDkzOTAgIHqzPC9zcGFuPjxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+PGJyPjxhIHRhcmdldD0iX3NlbGYiIGNsYXNzPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vd3d3LmN5ZnJvd2UucGwvYXBhcmF0LWN5ZnJvd3ktbmlrb24tejZpaWktYm9keS1wLmh0bWw/dXRtX3NvdXJjZT1vcHR5Y3puZS5wbCZ1dG1fbWVkaXVtPXJlZmVycmFsJnV0bV9jYW1wYWlnbj1jYW5vbl84OTY5NSI+U3ByYXdkvDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhci1mbG9hdCI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPCEtLSBFTkQgLmFydGljbGUtbWlkZGxlLWJsb2NrIC0tPgogICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8IS0tIEJFR0lOIC5hcnRpY2xlLW1pZGRsZS1ibG9jayAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtc2lkZS1ibG9jayI+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtcGhvdG8iPgogICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cuY3lmcm93ZS5wbC9hcGFyYXQtY3lmcm93eS1vbHltcHVzLW9tLTEtaWktaTEyLTQwLW1tLWYtMjgtcHJvLWlpLXAuaHRtbD91dG1fc291cmNlPW9wdHljem5lLnBsJnV0bV9tZWRpdW09cmVmZXJyYWwmdXRtX2NhbXBhaWduPWNhbm9uXzg3MDUyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InNldGJvcmRlciIgc3JjPSJodHRwczovL3VwbG9hZC5jeWZyb3dlLnBsL2N5ZnJvd2UvcGhvdG9zL09NMUlJXzEyLTQwbW0oMSlfMTQ3NTIzOTY4OC5qcGciPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LmN5ZnJvd2UucGwvYXBhcmF0LWN5ZnJvd3ktb2x5bXB1cy1vbS0xLWlpLWkxMi00MC1tbS1mLTI4LXByby1paS1wLmh0bWw/dXRtX3NvdXJjZT1vcHR5Y3puZS5wbCZ1dG1fbWVkaXVtPXJlZmVycmFsJnV0bV9jYW1wYWlnbj1jYW5vbl84NzA1MiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcGFyYXQgY3lmcm93eSBPTSBTeXN0ZW0gT00tMSBJSSArMTItNDAgbW0gZi8yLjggUHJvIElJCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtbGlua3MiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpY2UiPkNlbmE6IDxzcGFuIHN0eWxlPSJmb250LXNpemU6IDE0cHg7IGZvbnQtd2VpZ2h0IDogYm9sZDsgY29sb3I6ICNCRTE2MDA7Ij4gMTM5NDkgIHqzPC9zcGFuPjxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+PGJyPjxhIHRhcmdldD0iX3NlbGYiIGNsYXNzPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vd3d3LmN5ZnJvd2UucGwvYXBhcmF0LWN5ZnJvd3ktb2x5bXB1cy1vbS0xLWlpLWkxMi00MC1tbS1mLTI4LXByby1paS1wLmh0bWw/dXRtX3NvdXJjZT1vcHR5Y3puZS5wbCZ1dG1fbWVkaXVtPXJlZmVycmFsJnV0bV9jYW1wYWlnbj1jYW5vbl84NzA1MiI+U3ByYXdkvDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhci1mbG9hdCI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPCEtLSBFTkQgLmFydGljbGUtbWlkZGxlLWJsb2NrIC0tPgogICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8IS0tIEJFR0lOIC5hcnRpY2xlLW1pZGRsZS1ibG9jayAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtc2lkZS1ibG9jayI+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtcGhvdG8iPgogICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cuY3lmcm93ZS5wbC9hcGFyYXQtY3lmcm93eS1zb255LWE3LWl2LWJvZHktaWxjZS03bTQtcC5odG1sP3V0bV9zb3VyY2U9b3B0eWN6bmUucGwmdXRtX21lZGl1bT1yZWZlcnJhbCZ1dG1fY2FtcGFpZ249Y2Fub25fNzU0OTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0ic2V0Ym9yZGVyIiBzcmM9Imh0dHBzOi8vdXBsb2FkLmN5ZnJvd2UucGwvY3lmcm93ZS9waG90b3MvSUxDRS03TTRfODMxMjI3MjA0LmpwZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cuY3lmcm93ZS5wbC9hcGFyYXQtY3lmcm93eS1zb255LWE3LWl2LWJvZHktaWxjZS03bTQtcC5odG1sP3V0bV9zb3VyY2U9b3B0eWN6bmUucGwmdXRtX21lZGl1bT1yZWZlcnJhbCZ1dG1fY2FtcGFpZ249Y2Fub25fNzU0OTgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBhcmF0IGN5ZnJvd3kgU29ueSBBNyBJViBib2R5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtbGlua3MiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJpY2UiPkNlbmE6IDxzcGFuIHN0eWxlPSJmb250LXNpemU6IDE0cHg7IGZvbnQtd2VpZ2h0IDogYm9sZDsgY29sb3I6ICNCRTE2MDA7Ij4gIDk5ODQgIHqzPC9zcGFuPjxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+PGJyPjxhIHRhcmdldD0iX3NlbGYiIGNsYXNzPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vd3d3LmN5ZnJvd2UucGwvYXBhcmF0LWN5ZnJvd3ktc29ueS1hNy1pdi1ib2R5LWlsY2UtN200LXAuaHRtbD91dG1fc291cmNlPW9wdHljem5lLnBsJnV0bV9tZWRpdW09cmVmZXJyYWwmdXRtX2NhbXBhaWduPWNhbm9uXzc1NDk4Ij5TcHJhd2S8PC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyLWZsb2F0Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8IS0tIEVORCAuYXJ0aWNsZS1taWRkbGUtYmxvY2sgLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJiYW5uZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFubmVyLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxjZW50ZXI+PGZvbnQgc2l6ZT0xIGNvbG9yPSIjYzBjMGMwIj4tLS0tLSBSIEUgSyBMIEEgTSBBIC0tLS0tPC9mb250PjwvY2VudGVyPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmlwYXJ0cy5wbCIgdGFyZ2V0PV9ibGFuaz48aW1nIHNyYz0iYmFubmVyeS8xODB4MTIwLmdpZiIgYWx0PSJza2xlcCB6IGN66rZjaWFtaSBzYW1vY2hvZG93eW1pIGlQYXJ0cy5wbCIgdGl0bGU9InNrbGVwIHogY3rqtmNpYW1pIHNhbW9jaG9kb3d5bWkgaVBhcnRzLnBsIj48L2E+IC0tPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgPC9kaXY+IAoKCiAgICA8IS0tIEVORCAubWFpbi1ub3NwbGl0IC0tPgogICAgPC9kaXY+CjwhLS0gRU5EIC5tYWluLXNpZGViYXItbGVmdCAtLT4KPC9kaXY+ICAgICAgICAgICAgICAgICAgIAo8IS0tIEJFR0lOIC5tYWluLWNvbnRlbnQtbGVmdCAtLT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluLWNvbnRlbnQtbGVmdCAgIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC1hcnRpY2xlLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5BcGFyYXR5PC9oMT4gCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBCRUdJTiAubWFpbi1hcnRpY2xlLWNvbnRlbnQgLS0+IAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluLWFydGljbGUtY29udGVudCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJhcnRpY2xlLXRpdGxlIj5XIGJhemllIHpuYWpkdWplIHNp6iAyNDIzIGFwYXJhdPN3IGkgMTA2Mzggb2Nlbi48L2gyPgoJCQkgICAKCQkJICAgPGRpdiBjbGFzcz0iY29tcGFyaXNvbi1uYXYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPk1vv2VzeiB0Zb8genJvYmnmPGJyIC8+d7Nhc25lIHBvcvN3bmFuaWUgYXBhcmF083c8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpY29uLW5hdiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaWNvbi1hcGFyYXR5Ij48YSB0aXRsZT0iUG9y83duYWogYXBhcmF0eSIgaHJlZj0icG9y83duYW5pZV9hcGFyYXTzdy5odG1sIj48c3BhbiBjbGFzcz0iaWNvbiI+PC9zcGFuPlBvcvN3bmFqIGFwYXJhdHk8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWFyY2gtcHJvZHVjdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+UHJvc3rqIHBvZGHmIGludGVyZXN1arFjZSBDaeogcGFyYW1ldHJ5PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8Rk9STSBtZXRob2Q9IkdFVCIgYWN0aW9uPSJpbmRleC5odG1sIiBpZD0iYXBhcmF0eSIgY2xhc3M9ImRlZmF1bHQtZm9ybSI+CjxJTlBVVCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFwYXJhdCIgdmFsdWU9ImFsbCI+CjxwPgogICAgICA8bGFiZWw+UHJvZHVjZW50OjwvbGFiZWw+CiAgICAgIDxTRUxFQ1QgbmFtZT0icHJvZHVjZW50IiBpZD0icHJvZHVjZW50IiBvbmNoYW5nZT0iT3B0eWN6bmVBamF4KCcnLCdhcGFyYXQnKSI+CiAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj5kb3dvbG55PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iOTkiPkFnZmFQaG90bzwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjExOSI+QXBwbGU8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI3MSI+QmVuUTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjExNSI+QmxhY2ttYWdpYyBEZXNpZ248L29wdGlvbj48b3B0aW9uIHZhbHVlPSIyNiI+Q2Fub248L29wdGlvbj48b3B0aW9uIHZhbHVlPSIxNiI+Q2FybCBaZWlzczwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjYzIj5DYXNpbzwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjY2Ij5GdWppZmlsbTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjkwIj5HZW5lcmFsIEVsZWN0cmljPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMTMxIj5IYXNzZWxibGFkPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iNzAiPkhld2xldHQtUGFja2FyZDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjEyMCI+SFRDPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMTIxIj5IdWF3ZWk8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI2NyI+S29kYWs8L29wdGlvbj48b3B0aW9uIHZhbHVlPSIzOCI+S29uaWNhIE1pbm9sdGE8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI0MiI+TGVpY2E8L29wdGlvbj48b3B0aW9uIHZhbHVlPSIxMjIiPkxHPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMTE0Ij5MeXRybzwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjEyMyI+TWljcm9zb2Z0PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMjAiPk1pbm94PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMzciPk5pa29uPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMTI0Ij5Ob2tpYTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjM5Ij5PbHltcHVzPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMTUwIj5PTSBTeXN0ZW08L29wdGlvbj48b3B0aW9uIHZhbHVlPSIxNTEiPk9wcG88L29wdGlvbj48b3B0aW9uIHZhbHVlPSI2NCI+UGFuYXNvbmljPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMTMiPlBlbnRheDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjE0NSI+UGl4aWk8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI0NSI+UHJha3RpY2E8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI2OSI+Umljb2g8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI3OSI+Um9sbGVpPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iNjgiPlNhbXN1bmc8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI3MiI+U2FueW88L29wdGlvbj48b3B0aW9uIHZhbHVlPSI3MyI+U2lnbWE8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI2MiI+U29ueTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9Ijg1Ij5WaXZpdGFyPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iOTIiPlZvaWd0bGFuZGVyPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMTM3Ij5YaWFvbWk8L29wdGlvbj48b3B0aW9uIHZhbHVlPSIxMjkiPllJPC9vcHRpb24+ICAgICAgICA8L1NFTEVDVD4KPC9wPgo8cD4KICAgICAgPGxhYmVsPk1vZGVsOjwvbGFiZWw+CiAgICAgIDxTRUxFQ1QgbmFtZT0iYXBhcmF0IiBvbmNoYW5nZT0ic3VibWl0KCkiIGlkPSJtb2RlbCI+Cgk8T1BUSU9OIHZhbHVlPSJhbGwiPmRvd29sbnk8L09QVElPTj4KICAKICAgICAgICAgICAJPC9TRUxFQ1Q+CjwvcD4KPHA+CiAgICAgIDxsYWJlbD5Sb3pkemllbGN6b7bmOjwvbGFiZWw+CiAgICAgIDxTRUxFQ1QgbmFtZT0icGl4IiBpZD0icGl4IiBvbmNoYW5nZT0iT3B0eWN6bmVBamF4KCcnLCdhcGFyYXQnKSI+CiAgICAgICA8b3B0aW9uIHZhbHVlPSIwIj5kb3dvbG55PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMSI+ZG8gNiBNcGl4PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMiI+Ni4xIC0gMTAgTXBpeDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjMiPjEwLjEgLSAxNCBNcGl4PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iNCI+MTQuMSAtIDE5IE1waXg8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI1Ij4xOS4xIC0gMjUgTXBpeDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjYiPjI1LjEgLSAzMSBNcGl4PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iNyI+MzEuMSAtIDQwIE1waXg8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI4Ij40MC4xIC0gNjAgTXBpeDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjkiPnBvd3m/ZWogNjAgTXBpeDwvb3B0aW9uPiAgICAgICA8L1NFTEVDVD4KPC9wPgo8cD4KICAgICAgPGxhYmVsPlpvb20gb3B0eWN6bnk6PC9sYWJlbD4KICAgICAgPFNFTEVDVCBuYW1lPSJ6b29tIiBpZD0iem9vbSIgb25jaGFuZ2U9Ik9wdHljem5lQWpheCgnJywnYXBhcmF0JykiPgogICAgICAgIDxvcHRpb24gdmFsdWU9IjAiPmRvd29sbnk8L29wdGlvbj48b3B0aW9uIHZhbHVlPSIxIj5kbyAzeDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjIiPjMuMSAtIDV4PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iMyI+NS4xIC0gOHg8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI0Ij44LjEgLSAxNXg8L29wdGlvbj48b3B0aW9uIHZhbHVlPSI1Ij4xNS4xIC0gMjB4PC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0iNiI+MjAuMSAtIDQweDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9IjciPnBvd3m/ZWogNDB4PC9vcHRpb24+ICAgICAgICA8L1NFTEVDVD4KPC9wPgo8cD4KICAgICAgPGxhYmVsPlR5cDo8L2xhYmVsPgogICAgICA8U0VMRUNUIG5hbWU9InR5cCIgaWQ9InR5cCIgb25jaGFuZ2U9Ik9wdHljem5lQWpheCgnJywnYXBhcmF0JykiPgogICAgICAgIDxvcHRpb24+ZG93b2xueTwvb3B0aW9uPgoJPG9wdGlvbiB2YWx1ZT0iYiIgPmJlemx1c3Rlcmtvd2llYzwvb3B0aW9uPgoJPG9wdGlvbiB2YWx1ZT0iZCIgPmRhbG1pZXJ6PC9vcHRpb24+Cgk8b3B0aW9uIHZhbHVlPSJrIiA+a29tcGFrdDwvb3B0aW9uPgoJPG9wdGlvbiB2YWx1ZT0ibCIgPmx1c3RyemFua2E8L29wdGlvbj4KCTxvcHRpb24gdmFsdWU9Im0iID5tb2R1s293eTwvb3B0aW9uPgoJPG9wdGlvbiB2YWx1ZT0icyIgPnNtYXJ0Zm9uPC9vcHRpb24+CgkKICAgICAgPC9TRUxFQ1Q+CiA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SU5QVVQgdHlwZT0iY2hlY2tib3giIG5hbWU9InByemV0ZXN0IiBpZD0icHJ6ZXRlc3QiIHZhbHVlPSIxIiAgb25jaGFuZ2U9Ik9wdHljem5lQWpheCgnJywnYXBhcmF0JykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icHJ6ZXRlc3QiPlBva2G/IHR5bGtvIHByemV0ZXN0b3dhbmUgbW9kZWxlPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZm9ybS1zdWJtaXQiPgoJCQkJICAgICAgPElOUFVUIHR5cGU9InN1Ym1pdCIgdmFsdWU9Ild5c3p1a2FqIiBuYW1lPSJzenVrYWoiIGNsYXNzPSJidXR0b24iPgoJCQkJICA8L3A+CgogICAgCiAgICAKPElOUFVUIHR5cGU9ImhpZGRlbiIgbmFtZT0ic29ydCIgIGlkPSJzb3J0b3dhbmllIiB2YWx1ZT0iIj4KPC9GT1JNPgoKPHNjcmlwdD4KT3B0eWN6bmVBamF4KCcnLCdhcGFyYXQnKTsKPC9zY3JpcHQ+CjwvZGl2PgoKCgoKPGgyIGNsYXNzPSJhcnRpY2xlLXRpdGxlIHNwZWNpZmljYXRpb24tdGl0bGUiPlBlbnRheCAqaXN0IERMMiAtIHNwZWN5ZmlrYWNqYSBpIG9waW5pZTwvaDI+CjwhLS0gQkVHSU4gLnNob3J0Y29kZS1jb250ZW50IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2hvcnRjb2RlLWNvbnRlbnQiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBCRUdJTiAuY29udGVudC1wYW5lbCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LXBhbmVsIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj48aSBjbGFzcz0iZmEgZmEtaW1hZ2UiPjwvaT5aZGrqY2lhIGFwYXJhdHU8L2I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYXJ0aWNsZS1nYWxsZXJ5LXRodW1icyBjbGVhcmZpeCI+PGxpPjxhIGhyZWY9ImFwYXJhdHlfaW1hZ2UvNjI4X3BlbnRheF9pc3RETDJfMS5qcGciIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iQXBhcmF0IFBlbnRheCAqaXN0IERMMiIgIGRhdGEtbGlnaHRib3g9Im9wdHljem5lIj4KCTxpbWcgc3JjPSJhcGFyYXR5X2ltYWdlL21pbmlfNjI4X3BlbnRheF9pc3RETDJfMS5qcGciIGFsdD0iQXBhcmF0IFBlbnRheCAqaXN0IERMMiIgY2xhc3M9InNldGJvcmRlciI+PC9hPjwvbGk+CjwvdWw+CiAgPC9kaXY+CjwvZGl2PjxkaXYgY2xhc3M9ImJhbm5lciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lci1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEJFR0lOIC5jb250ZW50LXBhbmVsIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtcGFuZWwiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjxpIGNsYXNzPSJmYSBmYS1maWxlLXRleHQtbyI+PC9pPlNwZWN5ZmlrYWNqYSBhcGFyYXR1PC9iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJjb2xvcmVkIj4KICA8dGJvZHk+CiAgPHRyPgogICAgICA8dGggc3R5bGU9IndpZHRoOjE1MHB4OyI+UHJvZHVjZW50PC90aD4KICAgICAgPHRkPlBlbnRheDwvdGQ+Cgk8L3RyPgogICAgPHRyPgogICAgICA8dGg+TW9kZWw8L3RoPgogICAgICA8dGQ+KmlzdCBETDI8L3RkPgogICAgPC90cj4KICAKICAgIDx0cj4KICAgICAgPHRoPkRhdGEgcHJlbWllcnk8L3RoPgogICAgICA8dGQ+MjAwNi0wMS0yNzwvdGQ+Cgk8L3RyPgogICAgPHRyPgogICAgICA8dGg+TGljemJhIHBpa3NlbGk8L3RoPgogICAgICA8dGQ+Ni4xJm5ic3A7TXBpeDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+RG9zdOpwbmUgcm96ZHppZWxjem+2Y2k8L3RoPgogICAgICA8dGQ+SlBFRzogWzZNXSAzMDA4IHggMjAwMCBwaWtzZWxpLCBbNE1dIDI0MDAgeCAxNjAwIHBpa3NlbGksIFsxLjVNXSAxNTM2IHggMTAyNCBwaWtzZWxpLCBSQVc6IFs2TV0gMzAwOCB4IDIwMDggcGlrc2VsaTwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+TWF0cnljYTwvdGg+CiAgICAgIDx0ZD5DQ0QsIFJvem1pYXI6IDIzLjVtbSB4IDE1LjdtbSAocHJ6ZWuxdG5hOiAyOC40MG1tKS48L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgPHRoPlByb2Nlc29yIG9icmF6dTwvdGg+CiAgICAgIDx0ZD5icmFrIGRhbnljaDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+Rm9ybWF0IHphcGlzdTwvdGg+CiAgICAgIDx0ZD5KUEVHLCBSQVc8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgPHRoPlpha3JlcyBJU088L3RoPgogICAgICA8dGQ+QXV0bywgMjAwLCA0MDAsIDgwMCwgMTYwMCwgMzIwMDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+TWlnYXdrYTwvdGg+CiAgICAgIDx0ZD4xLzQwMDAgLSAzMCBzZWsuIG9yYXogYnVsYjwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+S29uc3RydWtjamEgb2JpZWt0eXd1PC90aD4KICAgICAgPHRkPm4vYTwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+T2duaXNrb3dhIG9iaWVrdHl3dTwvdGg+CiAgICAgIDx0ZD5uL2E8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgPHRoPqZ3aWF0s29zabNhPC90aD4KICAgICAgPHRkPm4vYTwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+Wm9vbSBvcHR5Y3pueTwvdGg+CiAgICAgIDx0ZD4weDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+Wm9vbSBjeWZyb3d5PC90aD4KICAgICAgPHRkPjB4PC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0aD5TdGFiaWxpemFjamEgb2JyYXp1PC90aD4KICAgICAgPHRkPk5pZTwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+WmFwaXMgd2lkZW88L3RoPgogICAgICA8dGQ+bmllPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0aD5PZ25pc2tvd2FuaWU8L3RoPgogICAgICA8dGQ+QUYsIE1GIHphbGW/bmUgb2Qgb2JpZWt0eXd1PC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0aD5Qb21pYXIgtndpYXSzYTwvdGg+CiAgICAgIDx0ZD5UVEwgNS1wdW5rdG93eSBhdXRvZm9rdXMgKFNBRk9YIFZJSUkpPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0aD5Pc3Ryb7bmIG9kPC90aD4KICAgICAgPHRkPm4vYTwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+QmFsYW5zIGJpZWxpPC90aD4KICAgICAgPHRkPkF1dG8sIKZ3aWF0s28gZHppZW5uZSwgWmFjaG11cnplbmllLCBDaWXxLCCmd2lhdLNvIL9hcm93ZSBvcmF6IGZsdW9yZXNjZW5jeWpuZSAoVywgTiwgRCksIExhbXBhIGKzeXNrb3dhLCBVc3Rhd2llbmlhIHLqY3puZTwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+S29tcGVuc2FjamEgZWtzcG96eWNqaTwvdGg+CiAgICAgIDx0ZD4mIzE3NzsyIEVWICgxLzJFViBsdWIgMS8zRVYpPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0aD5Qcm9ncmFteTwvdGg+CiAgICAgIDx0ZD5BdXRvIFBpY3R1cmUsIFBpY3R1cmUsIFByb2dyYW0gQUUsIFByZXNlbGVrY2phIG1pZ2F3a2kgQUUsIFByZXNlbGVrY2phIHByenlzs29ueSBBRSwgUG9taWFyIHLqY3pueSwgQ3phcyBCLiBQcm9ncmFteSB0ZW1hdHljem5lOiBTdGFuZGFyZCwgUG9ydHJldCwgS3Jham9icmF6LCBNYWtybywgUnVjaCwgU2NlbmEgbm9jbmEsIFN0YW5kYXJkIEZsZXN6IHd5s7Fjem9ueTwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+WmRq6mNpYSBzZXJ5am5lPC90aD4KICAgICAgPHRkPjIuOCBrbC9zLCBkbyA1LWNpdSB6ZGrq5jwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+TGFtcGEgYrN5c2tvd2E8L3RoPgogICAgICA8dGQ+QXV0bywgYrN5c2sgd3ltdXN6b255LCBis3lzayB3ebOxY3pvbnkuIFJlZHVrY2phIGN6ZXJ3b255Y2ggb2N6dS4gerOxY3plIGhvdC1zaG9lPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0aD5as7FjemUgaG90LXNob2U8L3RoPgogICAgICA8dGQ+QnJhayBkYW55Y2g8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgPHRoPld5arZjaWUgc3RhdHl3b3dlPC90aD4KICAgICAgPHRkPlRhazwvY2VudGVyPjwvdGg+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+U2Ftb3d5endhbGFjejwvdGg+CiAgICAgIDx0ZD4yIGx1YiAxMiBzZWsuPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0aD5LYXJ0YSBwYW1p6mNpPC90aD4KICAgICAgPHRkPlNEPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0aD5MQ0Q8L3RoPgogICAgICA8dGQ+Mi41IGNhbGEsIFRGVCAyMTB0eXMuIHBpa3NlbGk8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgPHRoPldpemplcjwvdGg+CiAgICAgIDx0ZD5rb25zdHJ1a2NqYSB1a7NhZHUgbHVzdGVyLCBwb2xlIHdpZHplbmlhIDk2JSwgcG93aeprc3plbmllIDAuODV4LCBSZWd1bGFjamEgZGlvcHRyaWk6IC0yLjUgZG8gKzEuNTwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+S29tdW5pa2FjamEgaSB6s7FjemE8L3RoPgogICAgICA8dGQ+VVNCIDIuMCAoSEktU1BFRUQpLCB3eWq2Y2llIFZpZGVvIChOVFNDL1BBTCksIHqzsWN6ZSBwaWxvdGEsIHqzsWN6ZSB6YXNpbGFuaWE8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgPHRoPlphc2lsYW5pZTwvdGg+CiAgICAgIDx0ZD40IGJhdGVyaWUgYWxrYWxpY3puZSB0eXB1IEFBLCA8QlI+bHViIDIgYmF0ZXJpZSBsaXRvd2UgQ1ItVjMsIDxCUj5sdWIgNCBha3VtdWxhdG9ya2kgbmlrbG93by13b2Rvcmtvd2UgKE5pTUgpIHR5cHUgQUEsIDxCUj5PcGNqb25hbG5pZSB6YXNpbGFjeiBzaWVjaW93eSBBQzwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+QWtjZXNvcmlhPC90aD4KICAgICAgPHRkPnBhc2VrLCAyIGJhdGVyaWUgbGl0b3dlIENSLVYzLCBrYWJlbCB2aWRlbywga2FiZWwgVVNCLCBvcHJvZ3JhbW93YW5pZSwgaW5zdHJ1a2NqYTwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGg+V2FnYTwvdGg+CiAgICAgIDx0ZD41NjUgZyAoeiBiYXRlcmlhbWkgaSBrYXJ0sSBTRCk8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgPHRoPld5bWlhcnk8L3RoPgogICAgICA8dGQ+MTI1IHggOTIuNSB4IDY2IG1tPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0aD5Eb2RhdGtvd2UgaW5mb3JtYWNqZTwvdGg+CiAgICAgIDx0ZD5Ob3dzemEgd2Vyc2phICppc3QgREwgcHJ6ZXpuYWN6b25hIG5hIHJ5bmVrIGF6amF0eWNraSBpIEthbmFk6i4gbS5pbi4gb2Rhbm8gbm93ZSBwcm9ncmFteSB0ZW1hdHljem5lLCBwb3ByYXdpb25vIEFGLiBNb79saXdvtuYgemFzdG9zb3dhbmlhIHBpbG90YSBuYSB6s7FjemUsIG5pZSBtYSBJUi4NCjwvdGQ+Cgk8L3RyPgogIDwvdGJvZHk+CjwvdGFibGU+CgogICAgICA8IS0tIHBhbmVsLWNvbnRlbnQgLS0+CiAgICAgIDwvZGl2PgogICAgPCEtLSBjb250ZW50LXBhbmVsIC0tPgogICAgPC9kaXY+CjwhLS0gRU5EIC5zaG9ydGNvZGUtY29udGVudCAtLT4KPC9kaXY+Cgk8YSBocmVmPSIjIiBuYW1lPSJvY2VueSI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJPGRpdiBjbGFzcz0iYXJ0aWNsZS1zaGFyZS1ib3R0b20iPgoJICA8ZGl2IGNsYXNzPSJyZXZpZXctdGl0bGUiPjxiPqZyZWRuaWEgb2NlbiB6IDMgb3BpbmlpLjwvYj48L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2aWV3LWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1yYXRpbmcgcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gQkVHSU4gc3RhcnMgYmFja2dyb3VuZCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBFTkQgc3RhcnMgYmFja2dyb3VuZCAtLT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0aW5nLWZpbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJCQkJCSAgQnVkb3dhIGkgamFrb7bmIHd5a29uYW5pYQoJCQkJCTwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9InJldmlldy1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtcmF0aW5nIHJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEJFR0lOIHN0YXJzIGJhY2tncm91bmQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gRU5EIHN0YXJzIGJhY2tncm91bmQgLS0+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGluZy1maWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkJUGFyYW1ldHJ5CgkJCQkgICAgIDwvZGl2PgoJCQkJICAgICA8ZGl2IGNsYXNzPSJyZXZpZXctY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJhdGluZyByaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRpbmctZmlsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkJV3lwb3Nhv2VuaWUgaSB1v3l0a293YW5pZQoJCQkJICAgICA8L2Rpdj4KCQkJCSAgICAgPGRpdiBjbGFzcz0icmV2aWV3LWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1yYXRpbmcgcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gQkVHSU4gc3RhcnMgYmFja2dyb3VuZCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBFTkQgc3RhcnMgYmFja2dyb3VuZCAtLT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0aW5nLWZpbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkJSmFrb7bmIHpkaurmCgkJCQkgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZXZpZXctY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJhdGluZyByaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRpbmctZmlsbCI+CgkJCQkJCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXItaGFsZiI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJCQlKYWtvtuYgLyBjZW5hCgkJCQkJPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJldmlldy1mb290Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJldmlldy1zdW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxiPk9jZW5hIG9n82xuYTwvYj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZXZpZXctdG90YWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPjQuNDA8L2I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RG9icmE8L3NwYW4+ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJhdGluZyByaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gQkVHSU4gc3RhcnMgYmFja2dyb3VuZCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBFTkQgc3RhcnMgYmFja2dyb3VuZCAtLT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGluZy1maWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXItZmxvYXQiPjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyLWZsb2F0Ij48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJCQkKPHNjcmlwdD4KCTwhLS0KCQlmdW5jdGlvbiBvcGVubW9kKHVybCkgewogICAgICAgIAkJdmFyIFdpbiA9IHdpbmRvdy5vcGVuKHVybCwiTW9kZXJhY2phIiwncmVzaXphYmxlPTEsc2Nyb2xsYmFycz1ubyxtZW51YmFyPW5vLGFkcmVzYmFyPW5vLHdpZHRoPTQwMCxoZWlnaHQ9MzAwJyApOwoJCX0KCS0tPgo8L3NjcmlwdD4KCQkJCQkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gQkVHSU4gLmNvbnRlbnQtcGFuZWwgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LXBhbmVsIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPk9jZW55IGN6eXRlbG5pa/N3ICgzKTwvYj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3AtcmlnaHQiPjxhIGhyZWY9IiNkb2Rhai1vY2VuZSI+PGkgY2xhc3M9ImZhIGZhLXBlbmNpbCI+PC9pPiAmbmJzcDtEb2RhaiBzd29qsSBvY2Vu6jwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb21tZW50LWJsb2NrIGNvbW1lbnQtcmV2aWV3cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9sIGNsYXNzPSJjb21tZW50cyIgaWQ9ImNvbW1lbnRzIj4KCgkJCTxsaSBjbGFzcz0iY29tbWVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb21tbWVudC1jb250ZW50IiBpZD0iY29tbWVudC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1c2VyLWF2YXRhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGU+PHRib2R5Pjx0cj48dGQ+PGltZyBzcmM9ImltYWdlcy9uby1hdmF0YXIuanBnIiAgYWx0PSJQRUVQIiB0aXRsZT0iUEVFUCIgIHdpZHRoPSI2MCIgaGVpZ2h0PSI2MCIvPjwvdGQ+PC90cj48L3Rib2R5PjwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBjbGFzcz0idXNlci1uaWNrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPlBFRVA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHJvbmc+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0aW1lLXN0YW1wIj4xNSBrd2lldG5pYSAyMDA4LCAxMzo0MDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIja29tMTA2MSIgb25jbGljaz0ib3Blbm1vZCgnbW9kZXJhY2phLnBocD90eXA9b2FwYXJhdCZ0eXBpZD0xMDYxJnNpZD1jMzAxYjc1ZmVlMjM0YjMwMGQ4ZDZiZTdjMWZlNmUwYTUwZmFkNzA3NDE1ZDJlNDM1Mzk2M2M1Mzk5NjFjNDZhZDI4OTg0NGY0MDkzYmE5NicpOyIgY2xhc3M9ImNvbW1lbnQtZGVsZXRlIiB0aXRsZT0iWmezb7YgZG8gdXN1bmnqY2lhIGx1YiBtb2RlcmFjamkiPjxpIGNsYXNzPSJmYSBmYS10aW1lcy1jaXJjbGUiPjwvaT48L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8ZGl2IGNsYXNzPSJhcnRpY2xlLXNoYXJlLWJvdHRvbSI+CiAgPGRpdiBjbGFzcz0icmV2aWV3LWNvbnRlbnQiPgogICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJhdGluZyByaWdodCI+CiAgICAgIDwhLS0gQkVHSU4gc3RhcnMgYmFja2dyb3VuZCAtLT4KCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+Cgk8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+Cgk8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJPCEtLSBFTkQgc3RhcnMgYmFja2dyb3VuZCAtLT4KCgk8ZGl2IGNsYXNzPSJyYXRpbmctZmlsbCI+CgkgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgk8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIEJ1ZG93YSBpIGpha2+25iB3eWtvbmFuaWEKICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJyZXZpZXctY29udGVudCI+CiAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtcmF0aW5nIHJpZ2h0Ij4KCSAgPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgoKCSAgPGRpdiBjbGFzcz0icmF0aW5nLWZpbGwiPgoJICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4JICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIFBhcmFtZXRyeSAKICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9InJldmlldy1jb250ZW50Ij4KICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1yYXRpbmcgcmlnaHQiPgoJICA8IS0tIEJFR0lOIHN0YXJzIGJhY2tncm91bmQgLS0+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDwhLS0gRU5EIHN0YXJzIGJhY2tncm91bmQgLS0+CgoJICA8ZGl2IGNsYXNzPSJyYXRpbmctZmlsbCI+CgkgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgkgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgV3lwb3Nhv2VuaWUgaSB1v3l0a293YW5pZQogIDwvZGl2PgogICAgPGRpdiBjbGFzcz0icmV2aWV3LWNvbnRlbnQiPgogICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJhdGluZyByaWdodCI+CgkgIDwhLS0gQkVHSU4gc3RhcnMgYmFja2dyb3VuZCAtLT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPCEtLSBFTkQgc3RhcnMgYmFja2dyb3VuZCAtLT4KCgkgIDxkaXYgY2xhc3M9InJhdGluZy1maWxsIj4KCSAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4JICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIEpha2+25iB6ZGrq5iAKICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJyZXZpZXctY29udGVudCI+CiAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtcmF0aW5nIHJpZ2h0Ij4KCSAgPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgoKCSAgPGRpdiBjbGFzcz0icmF0aW5nLWZpbGwiPgoJICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgkgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgSmFrb7bmIC8gY2VuYSAKICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJyZXZpZXctZm9vdCI+CiAgPGRpdiBjbGFzcz0icmV2aWV3LXN1bSI+CiAgICAgIDxwPjxiPk9jZW5hIG9n82xuYTwvYj48L3A+CiAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogIDxkaXYgY2xhc3M9InJldmlldy10b3RhbCI+CiAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtcmF0aW5nIHJpZ2h0Ij4KCSAgPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgoKCSAgPGRpdiBjbGFzcz0icmF0aW5nLWZpbGwiPgoJICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3Rhci1oYWxmIj48L2k+CSAgPC9kaXY+CiAgICAgIDwvZGl2PgogIDwvZGl2PgoKICAgICAgPGRpdiBjbGFzcz0iY2xlYXItZmxvYXQiPjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJjbGVhci1mbG9hdCI+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8L2Rpdj4KCQoJCgk8ZGl2IGNsYXNzPSJ1c2VyLWRlc2NyaXB0aW9uIj4KCSAgICA8c3BhbiBjbGFzcz0iaXAiPgpJUCZuYnNwOzg5LjE3NC54LngKPC9zcGFuPjxiciAvPgoJICAgIDxzcGFuPlW/eXRrdWplIG9kOjwvc3Bhbj4gMiBsYXQ8YnIgLz4KCSAgICA8c3Bhbj5DZW5hIHpha3VwdTo8L3NwYW4+IDI1MDA8YnIgLz4KCSAgICA8c3Bhbj5XeWtvcnp5c3RhbmllOjwvc3Bhbj4gQW1hdG9yc2tpZQk8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCQkJCgk8ZGl2IGNsYXNzPSJjb21tZW50LXRleHQiPgoJICAgIDxwPjxiPldhZHk6PC9iPiBobW0gamFrIHphIHTqIGNlbm5lIHRvIGNp6r9rbyBjb7Ygem5hbGW85iwgbm8gbW+/ZSBNZW51IGkgYnJhayBtb79saXdvtmNpIHBvZHBp6mNpYSBncmlwYTwvcD4KCTwvZGl2PgoJPGRpdiBjbGFzcz0iY29tbWVudC10ZXh0Ij4KCSAgICA8cD48Yj5aYWxldHk6PC9iPiAtRHW/eSB3aXpqZXINCi0gUGnqa25lIG9kZGFuaWUga29sb3Lzdw0KLSBkb2JyeSBpIHN6eWJraSBLSVQgdyBrb21wbGVjaWUNCi1vZHBvd2llZG5pYSB3aWVsa2+25g0KLSBkdb95IG1vbml0b3IgTENEDQotIGxjZCB6IHBhcmFtZXRyYW1pIG5hIGfzcm5laiC2Y2lhbmNlDQotIHRhbmkgYWRhcHRlciBkbyBzemtpZbMgbTQyDQotIHJld2VsYWN5am5hIHdzcPOzcHJhY2EgeiBvYmlla3R5d2FtaSBiZXogIkEiIGkgbTQyLCBjYW5vbm93aSBkYWxla28gZG8gdGVnby4NCi16YXNpbGFuaWUgYWt1bXVsYXRvcm93ZSB0eXB1IEFBIGRvc3nmIHd5ZGFqbmUsIHUgbW5pZSBva2+zbyAzNzAgemRq6uYuPC9wPgoJPC9kaXY+Cgk8ZGl2IGNsYXNzPSJjb21tZW50LXRleHQiPgoJICAgIDxwPjxiPlBvZHN1bW93YW5pZTo8L2I+IE9zdGF0bmkga29ycHVzIFBlbnRheCdhIGJleiB6YupkbnljaCBiYWplcvN3LCB0dSBsaWN6eSBzaeogdHlsa28gdHdvamEga3JlYXR5d25vtuYsIHByenkgcm9iaWVuaXUgemRq6uYsIGEgb24gQ2kgcGV3bmllIHBvbW+/ZS4gPC9wPgoJPC9kaXY+CgkKICAgIDwvZGl2Pgo8L2xpPjwhLS0gI2NvbW1lbnQtIyMgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJPGxpIGNsYXNzPSJjb21tZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbW1tZW50LWNvbnRlbnQiIGlkPSJjb21tZW50LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVzZXItYXZhdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZT48dGJvZHk+PHRyPjx0ZD48aW1nIHNyYz0iaW1hZ2VzL25vLWF2YXRhci5qcGciICBhbHQ9IktvbmR6aXUiIHRpdGxlPSJLb25keml1IiAgd2lkdGg9IjYwIiBoZWlnaHQ9IjYwIi8+PC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGNsYXNzPSJ1c2VyLW5pY2siPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+S29uZHppdTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRpbWUtc3RhbXAiPjMwIG1hcmNhIDIwMDgsIDIyOjA0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNrb20xMDA2IiBvbmNsaWNrPSJvcGVubW9kKCdtb2RlcmFjamEucGhwP3R5cD1vYXBhcmF0JnR5cGlkPTEwMDYmc2lkPWMzMDFiNzVmZWUyMzRiMzAwZDhkNmJlN2MxZmU2ZTBhNTBmYWQ3MDc4NTU0ZmU5ZWUwZWQyNGQ5N2NjM2I1MDBhMzNkNDMyMGMwZmNkNWEzJyk7IiBjbGFzcz0iY29tbWVudC1kZWxldGUiIHRpdGxlPSJaZ7NvtiBkbyB1c3VuaepjaWEgbHViIG1vZGVyYWNqaSI+PGkgY2xhc3M9ImZhIGZhLXRpbWVzLWNpcmNsZSI+PC9pPjwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCjxkaXYgY2xhc3M9ImFydGljbGUtc2hhcmUtYm90dG9tIj4KICA8ZGl2IGNsYXNzPSJyZXZpZXctY29udGVudCI+CiAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtcmF0aW5nIHJpZ2h0Ij4KICAgICAgPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgoJPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+Cgk8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+Cgk8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgoKCTxkaXYgY2xhc3M9InJhdGluZy1maWxsIj4KCSAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CTwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgQnVkb3dhIGkgamFrb7bmIHd5a29uYW5pYQogIDwvZGl2PgogIDxkaXYgY2xhc3M9InJldmlldy1jb250ZW50Ij4KICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1yYXRpbmcgcmlnaHQiPgoJICA8IS0tIEJFR0lOIHN0YXJzIGJhY2tncm91bmQgLS0+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDwhLS0gRU5EIHN0YXJzIGJhY2tncm91bmQgLS0+CgoJICA8ZGl2IGNsYXNzPSJyYXRpbmctZmlsbCI+CgkgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4JICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIFBhcmFtZXRyeSAKICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9InJldmlldy1jb250ZW50Ij4KICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1yYXRpbmcgcmlnaHQiPgoJICA8IS0tIEJFR0lOIHN0YXJzIGJhY2tncm91bmQgLS0+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDwhLS0gRU5EIHN0YXJzIGJhY2tncm91bmQgLS0+CgoJICA8ZGl2IGNsYXNzPSJyYXRpbmctZmlsbCI+CgkgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgkgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgV3lwb3Nhv2VuaWUgaSB1v3l0a293YW5pZQogIDwvZGl2PgogICAgPGRpdiBjbGFzcz0icmV2aWV3LWNvbnRlbnQiPgogICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJhdGluZyByaWdodCI+CgkgIDwhLS0gQkVHSU4gc3RhcnMgYmFja2dyb3VuZCAtLT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPCEtLSBFTkQgc3RhcnMgYmFja2dyb3VuZCAtLT4KCgkgIDxkaXYgY2xhc3M9InJhdGluZy1maWxsIj4KCSAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4JICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIEpha2+25iB6ZGrq5iAKICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJyZXZpZXctY29udGVudCI+CiAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtcmF0aW5nIHJpZ2h0Ij4KCSAgPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgoKCSAgPGRpdiBjbGFzcz0icmF0aW5nLWZpbGwiPgoJICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4JICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIEpha2+25iAvIGNlbmEgCiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0icmV2aWV3LWZvb3QiPgogIDxkaXYgY2xhc3M9InJldmlldy1zdW0iPgogICAgICA8cD48Yj5PY2VuYSBvZ/NsbmE8L2I+PC9wPgogIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICA8ZGl2IGNsYXNzPSJyZXZpZXctdG90YWwiPgogICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJhdGluZyByaWdodCI+CgkgIDwhLS0gQkVHSU4gc3RhcnMgYmFja2dyb3VuZCAtLT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPCEtLSBFTkQgc3RhcnMgYmFja2dyb3VuZCAtLT4KCgkgIDxkaXYgY2xhc3M9InJhdGluZy1maWxsIj4KCSAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CSAgPC9kaXY+CiAgICAgIDwvZGl2PgogIDwvZGl2PgoKICAgICAgPGRpdiBjbGFzcz0iY2xlYXItZmxvYXQiPjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJjbGVhci1mbG9hdCI+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8L2Rpdj4KCQoJCgk8ZGl2IGNsYXNzPSJ1c2VyLWRlc2NyaXB0aW9uIj4KCSAgICA8c3BhbiBjbGFzcz0iaXAiPgpJUCZuYnNwOzgxLjIxMC54LngKPC9zcGFuPjxiciAvPgoJICAgIDxzcGFuPlW/eXRrdWplIG9kOjwvc3Bhbj4gMSByb2s8YnIgLz4KCSAgICA8c3Bhbj5DZW5hIHpha3VwdTo8L3NwYW4+IDEzMDA8YnIgLz4KCSAgICA8c3Bhbj5XeWtvcnp5c3RhbmllOjwvc3Bhbj4gQW1hdG9yc2tpZQk8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCQkJCgk8ZGl2IGNsYXNzPSJjb21tZW50LXRleHQiPgoJICAgIDxwPjxiPldhZHk6PC9iPiBXZyBtbmllICJNYbN5IiBrb3JwdXMsIGJyYWt1amUgbXUgeiAxMCAtIDE1IG1tIHcgdWNod3ljaWUsIGdkeb8gYmFyZHpvIGN66nN0byB1Y2lla2EgbmFtIG1hs3kgcGFsZWMsIHByemV6IGNvIHRyYWNpbXkgc3RhYmlsbm+25iB0cnp5bWFuaWEgYm9keS4gDQoNCkFmIG3zZ7NieSBieeYgbGVwc3p5LCB6Z2FkemFtIHNp6iB6IG9waW5psSBKYXJrYSwgYmFyZHpvIGN66nN0byBBZiBwcnplamW/ZL9hIGNhs3kgemFrcmVzIG9zdHJvtmNpLCC/ZWJ5IHqzYXBh5iBvYmlla3QuIA0KDQpNb2plIHdyYb9lbmllIHBhdHJ6sWMgbmEgZG9kYXRrb3dlIGFrY2Vzb3JpYSBkbyB0ZWdvIGFwYXJhdHUsIL9lIG9n82xuaWUgd3N6eXN0a28gamVzdCB3emds6mRuaWUgZHJvZ2llLCBiYXR0ZXJ5LXBhY2tpLCBvYmlla3R5d3ksIGxhbXB5LiBUYWtpZSBtaWGzZW0gd3Jhv2VuaWUuIFBvemEgdHltIG5pZSB6YXV3Yb95s2VtIHpieXQgZHW/ZWogaWxvtmNpIGZpcm1vd3ljaCBvYmlla3R5d/N3IHd5v3N6ZWoga2xhc3kuIENhbm9uIG1hIHN3b2plIEwta2ksIE5pa29uIC0gTmlrb3JyeSwgYSBQZW50YXg/IFphbWllbm5pa2kgVGFtcm9ueSBpIFNpZ215PyANCg0KRG9kYXRrb3dvLCBvZG5vtm5pZSBha2Nlc29yafN3LCB0byBzemtvZGEsIL9lIFBlbnRheCBuaWUgbWEgc3dvamVnbyBHcmlwYSAobmllIG3zd2nqIG8gYmF0dGVyeS1wYWNrdSksIGdkeb8gem5hY3puaWUgcG9sZXBzenmzb2J5IHRvIHVjaHd5dC4gVHJ6ZWJhIHNvdG9zb3dh5iB6YW1pZW5uaWtpIGlubnljaCBmaXJtIChjbyBuYWq2bWllc3puaWVqc3plLCBrb25rdXJlbmNqaSkgaSBrdXBp5iBDYW5vbm93c2tpIGdyaXAgbyBzeW1ib2x1IFB0LTEwMCBpIGdvIG5pZWNvIHN0dW5pbmdvd2HmLCC/ZWJ5IHBhc293YbMgZG8gYXBhcmF0dS4gDQoNClBhdHJ6sWMgbmEgdGVuIGFwYXJhdCBqYWtvIGx1c3RyemFua+ogYW1hdG9yc2uxLCB0byB6d3LzY+ogdXdhZ+ogbmEgd2J1ZG93YW6xIGxhbXDqLiBPa2F6dWplIHNp6iAocG8gcG9y83duYW5pdSB6IENhbm9uZW0gMzUwRCBpIE5pa29uZW0gRDUwKSwgv2UgbGFtcGEgd3ljaHlsYSBzaeogZG9zeeYgbmlza28uIENhbm9uIGkgTmlrb24gU3dvamEgbGFtcGvqIHd5Y2h5bGFqsSBqYWtptiAxIC0gMSw1IGNtIHd5v2VqLiBSYXogbWkgc2nqIHpkYXJ6ebNvLCC/ZSBjaWXxIG9iaWVrdHl3dSBwYWSzIG5hIGZvdG9ncmFmb3dhbnkgb2JpZWt0IChwcnp5IHJvYmllbml1IHpkaurmIG1ha3JvIGRvtndpZXRsYW55Y2ggd2J1ZG93YW6xIGxhbXCxKS4gRGxhIG9z82IsIGt083JlIGt1cG5vIHpld27qdHJ6ZW5qIGxhbXB5IG5pZSBzdGF3aWFqsSBuYSBwaWVyd3N6eW0gbWllanNjdSwgbXm2bOosIL9lIGplc3QgdG8gdb95dGVjem5hIGluZm9ybWFjamEuDQoNClcgcG9y83duaWFuaXUgeiBDYW5vbmVtIGkgTmlrb25lbSwgY3rqtuYgZnVua2NqaSB6b3N0YbNhIHVrcnl0YSB3IG1lbnUgYXBhcmF0dSwgZ2R6aWUga29ua3VyYW5jamEgdW1pZbZjabNhIGN6ZbbmIGZ1bmtjamkgcG9kIGtvbmtyZXRueW1pIHByenljaXNrYW1pLiBEbGEgamVkbnljaCB3YWRhLCBkbGEgZHJ1Z2ljaCB6YWxldGEuIFogZHJ1Z2llaiBzdHJvbnkgcG8gb3Bhbm93YW5pdSByb3ptaWVzemN6ZW5pYSBmdW5rY2ppIHcgbWVudSBkb3N06nAgbnAuIGRvIGlzbyBjenkgV0IgamVzdCBuaWV6d3lrbGUgc3ByYXdueS48L3A+Cgk8L2Rpdj4KCTxkaXYgY2xhc3M9ImNvbW1lbnQtdGV4dCI+CgkgICAgPHA+PGI+WmFsZXR5OjwvYj4gU29saWRuYSwgIm5pZSBwbGFzdGtvd2EiIG9idWRvd2EsIGNod3l0YWqxYyB0ZW4gYXBhcmF0IG5pZSBtYSBzaeogd3Jhv2VuaWEgdGFuZGV0eSwgamFrsSBtYSBzaeogbnAuIHRyenltYWqxYyBDYW5vbmEgMzAwRDsgDQoNClBvIG9wYW5vd2FuaXUgcG9kc3Rhd293eWNoIGZ1bmtjamkgYXBhcmF0dSAoY3phcywgcHJ6eXOzb25hLCBpc28sIFdCKSwgZGFq6iBvbiBkdb9vIHJhZG+2Y2kgeiByb2JpZW5pYSB6ZGrq5iwgd2FydG8gd3RlZHkgb2JlanJ6ZeYgc2nqIHphIG5vd3ltaSBzemuzYW1pIGRvIGFwYXJhdHUgKG5wLiBTaWdtYSAxNy03MCkgaSBkYWxlaiByb3p3aWph5iB3YXJzenRhdCwgZ2R5vyB0byBuYXByYXdk6iB3Y2mxZ2EuIDwvcD4KCTwvZGl2PgoJPGRpdiBjbGFzcz0iY29tbWVudC10ZXh0Ij4KCSAgICA8cD48Yj5Qb2RzdW1vd2FuaWU6PC9iPiBOYSBib2R5IFBlbnRheGEgaXN0RCBMMiB0cnplYmEgcGF0cnpl5iBwb2Qga7F0ZW0gYW1hdG9yc2tpZWogbHVzdHJ6YW5raSBjeWZyb3dlai4gWiBuYWNpc2tpZW0gbmEgYW1hdG9yc2tpZWouIERsYXRlZ28gZXdlbnR1YWxuZSB3YWR5IGx1YiB6YWxldHkgbXVzerEgYnnmIG9jZW5pYW5lIHBvZCB3emds6mRlbSB1v3l0a293bmlrYSwga3TzcnkgYupkemllIHogbmllZ28ga29yenlzdGGzLg0KDQpPZ/OzZW0gamVzdCB0byBET0JSQSBsdXN0cnphbmthLiANCg0KTmllIGplc3QgdG8gSzEwIGFuaSBLMjAuIERhbGVrbyBtdSBkbyB0eWNoIGFwYXJhdPN3LiBBbGUgamVzdCB0byBiYXJkem8gZG9icmEgcG96eWNqYSBuYSBzdGFydC4gDQoNCkplv2VsaSBrdG+2IGN6dWplLCC/ZSBtb79saXdvtmNpIGtvbXBha3Rvd3ljaCBhcGFyYXTzdyBzsSBkbGEgbmllZ28gbmllIHd5c3RhcmN6YWqxY2UsIGNoY2Ugc2nqIHJvendpamHmIHcga2llcnVua3UgZm90b2dyYWZpaSBjeWZyb3dlaiwgYmV6IHByemVjaG9kemVuaWEgcHJ6ZXogcPOzLbZyb2RraSB3IHBvc3RhY2kgcvO/bmVnbyByb2R6YWp1IGh5YnJ5ZCwgdG8gd2FydG8garEga3VwaeYuIA0KDQpUcnplYmEgcGFtaep0YeYsIL9lIGplc3QgdG8gbHVzdHJ6YW5rYSBjeWZyb3dhLCBtYSBzd29qZSBnYWJhcnl0eSwgY2nqv2FyLCBha2Nlc29yaWEuIFRyemViYSBsaWN6eeYgc2nqIHogdHltLCC/ZSBi6mR6aWVzeiB0byB3c3p5c3RrbyB0YXN6Y3p55iB6ZSBzb2KxLCBqZb9lbGkgc2nqIGplZHppZSBucC4gZG8gY2lvY2kgbmEgaW1pZW5pbmFjaC4gTmF3ZXQgamFksWMsIGdkemlltiB6YSBtaWFzdG8sIGNob2R6sWMgbmEgc3BhY2VyeSwgb2RjenV3YSBzaeogY2llv2FyIGJhbGFzdHUsIHLzv255Y2ggb2JpZWt0eXfzdyBpIHNhbWVnbyBib2R5LiANCg0KVHJ6ZWJhIHNrYWxrdWxvd2HmIGN6eSB3b2xpbXkgd3lnb2TqIGtvbXBha3R1LCBrdPNyeSBtaWW2Y2kgc2nqIHcga2llc3plbmkgb2QgbWFyeW5hcmtpLCBjenkgd29saW15IHd5ZG9ieeYgemUgemRq6uYgZ7PqYmnqIG9zdHJvtmNpIGkgaW5uZSBlZmVrdHkuIFRvIHOxIHBld25lIHBsdXN5IGkgbWludXN5LCBrdPNyZSB0cnplYmEgdXd6Z2zqZG5p5iBwcnplZCB6YWt1cGVtLg0KDQpXIGNod2lsaWkgb2JlY25laiB1v3l3YW5lIGJvZHkgem5hbGW85iBtb79uYSB6YSBvay4gNzAwIC0gODAwIHqzLiBKZXN0IHRvIGRvc3nmIHJvenOxZG5hIGt3b3RhLCB0eWxrbyB0cnplYmEgcGFtaep0YeYsIL9lIGx1c3Ryem5rYSwgdG8gamVzdCBwZXduZWdvIHJvZHphanUgc2thcmJvbmthLiBOaWUgc2tv8WN6eSBzaeogdG8gbmEga3VwbmllIHN0YW5kYXJkb3dlZ28gb2JpZWt0eXd1IDE4LTU1LiBTsSBpbm5lIG9iaWVrdHl3eSwgc3RhdHl3LCB0b3JiYSwga2FydHkgcGFtaepjaSwgemV3bup0cnpuYSBsYW1wYSwgYmF0dGVyeS1wYWNrLCBmaWx0cnkuIFogY3phc2VtIG1vv2UgcHJ6eWq25iBvY2hvdGEgbmEga3Vwbm8gbm93ZWdvIGJvZHkuIFRvIHdzenlzdGtvIHRvIGplc3Qga2FzYS4gVHJ6ZWJhIHdpZWR6aWXmIGN6eSBjaGNlIHNp6iB3IHRvIHdlarbmIGkgemFjerHmIHByYXdkeml3sSB6YWJhd+ogeiBmb3RvZ3JhZmmxLiA8L3A+Cgk8L2Rpdj4KCQogICAgPC9kaXY+CjwvbGk+PCEtLSAjY29tbWVudC0jIyAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCQk8bGkgY2xhc3M9ImNvbW1lbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29tbW1lbnQtY29udGVudCIgaWQ9ImNvbW1lbnQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXNlci1hdmF0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlPjx0Ym9keT48dHI+PHRkPjxpbWcgc3JjPSJpbWFnZXMvbm8tYXZhdGFyLmpwZyIgIGFsdD0iSmFyZWsiIHRpdGxlPSJKYXJlayIgIHdpZHRoPSI2MCIgaGVpZ2h0PSI2MCIvPjwvdGQ+PC90cj48L3Rib2R5PjwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBjbGFzcz0idXNlci1uaWNrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPkphcmVrPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGltZS1zdGFtcCI+MyBsdXRlZ28gMjAwOCwgMTI6MDc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI2tvbTc3OCIgb25jbGljaz0ib3Blbm1vZCgnbW9kZXJhY2phLnBocD90eXA9b2FwYXJhdCZ0eXBpZD03Nzgmc2lkPWMzMDFiNzVmZWUyMzRiMzAwZDhkNmJlN2MxZmU2ZTBhNTBmYWQ3MDczYWVmMzYzNjkyNDE5MWEzZTE4ZmFiYzg1MGM0OTZmN2U0MTEwNjkxJyk7IiBjbGFzcz0iY29tbWVudC1kZWxldGUiIHRpdGxlPSJaZ7NvtiBkbyB1c3VuaepjaWEgbHViIG1vZGVyYWNqaSI+PGkgY2xhc3M9ImZhIGZhLXRpbWVzLWNpcmNsZSI+PC9pPjwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCjxkaXYgY2xhc3M9ImFydGljbGUtc2hhcmUtYm90dG9tIj4KICA8ZGl2IGNsYXNzPSJyZXZpZXctY29udGVudCI+CiAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtcmF0aW5nIHJpZ2h0Ij4KICAgICAgPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgoJPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+Cgk8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+Cgk8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgoKCTxkaXYgY2xhc3M9InJhdGluZy1maWxsIj4KCSAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CTwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgQnVkb3dhIGkgamFrb7bmIHd5a29uYW5pYQogIDwvZGl2PgogIDxkaXYgY2xhc3M9InJldmlldy1jb250ZW50Ij4KICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1yYXRpbmcgcmlnaHQiPgoJICA8IS0tIEJFR0lOIHN0YXJzIGJhY2tncm91bmQgLS0+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDwhLS0gRU5EIHN0YXJzIGJhY2tncm91bmQgLS0+CgoJICA8ZGl2IGNsYXNzPSJyYXRpbmctZmlsbCI+CgkgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4JICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIFBhcmFtZXRyeSAKICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9InJldmlldy1jb250ZW50Ij4KICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1yYXRpbmcgcmlnaHQiPgoJICA8IS0tIEJFR0lOIHN0YXJzIGJhY2tncm91bmQgLS0+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkgIDwhLS0gRU5EIHN0YXJzIGJhY2tncm91bmQgLS0+CgoJICA8ZGl2IGNsYXNzPSJyYXRpbmctZmlsbCI+CgkgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgkgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgV3lwb3Nhv2VuaWUgaSB1v3l0a293YW5pZQogIDwvZGl2PgogICAgPGRpdiBjbGFzcz0icmV2aWV3LWNvbnRlbnQiPgogICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJhdGluZyByaWdodCI+CgkgIDwhLS0gQkVHSU4gc3RhcnMgYmFja2dyb3VuZCAtLT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCSAgPCEtLSBFTkQgc3RhcnMgYmFja2dyb3VuZCAtLT4KCgkgIDxkaXYgY2xhc3M9InJhdGluZy1maWxsIj4KCSAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4JICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIEpha2+25iB6ZGrq5iAKICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJyZXZpZXctY29udGVudCI+CiAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtcmF0aW5nIHJpZ2h0Ij4KCSAgPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgoKCSAgPGRpdiBjbGFzcz0icmF0aW5nLWZpbGwiPgoJICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgkgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgSmFrb7bmIC8gY2VuYSAKICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJyZXZpZXctZm9vdCI+CiAgPGRpdiBjbGFzcz0icmV2aWV3LXN1bSI+CiAgICAgIDxwPjxiPk9jZW5hIG9n82xuYTwvYj48L3A+CiAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogIDxkaXYgY2xhc3M9InJldmlldy10b3RhbCI+CiAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtcmF0aW5nIHJpZ2h0Ij4KCSAgPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJICA8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgoKCSAgPGRpdiBjbGFzcz0icmF0aW5nLWZpbGwiPgoJICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4JICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgPC9kaXY+CgogICAgICA8ZGl2IGNsYXNzPSJjbGVhci1mbG9hdCI+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogIDwvZGl2PgogIDxkaXYgY2xhc3M9ImNsZWFyLWZsb2F0Ij48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCjwvZGl2PgoJCgkKCTxkaXYgY2xhc3M9InVzZXItZGVzY3JpcHRpb24iPgoJICAgIDxzcGFuIGNsYXNzPSJpcCI+CklQJm5ic3A7ODMuMjQueC54Cjwvc3Bhbj48YnIgLz4KCSAgICA8c3Bhbj5Vv3l0a3VqZSBvZDo8L3NwYW4+IDMgbWllcy48YnIgLz4KCSAgICA8c3Bhbj5DZW5hIHpha3VwdTo8L3NwYW4+IDE5MDA8YnIgLz4KCSAgICA8c3Bhbj5XeWtvcnp5c3RhbmllOjwvc3Bhbj4gQW1hdG9yc2tpZQk8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCQkJCgk8ZGl2IGNsYXNzPSJjb21tZW50LXRleHQiPgoJICAgIDxwPjxiPldhZHk6PC9iPiBXb255IGF1dG9mb2t1cywgY3phc2VtIHNp6iBndWJpIGkgcHJ6ZWplv2S/YSBjYbOxIHNrYWzqIGFieSB6s2FwYeYgb3N0cm+25iBjbyBuaWVzdGV0eSB0cndhIGSzdWdvLiBaZGFyemEgc2nqIHRvIHN6Y3plZ/NsbmllIGN66nN0byBwcnp5IGtpZXBza2ltIG+2d2lldGxlbml1LiA8L3A+Cgk8L2Rpdj4KCTxkaXYgY2xhc3M9ImNvbW1lbnQtdGV4dCI+CgkgICAgPHA+PGI+WmFsZXR5OjwvYj4gTmllerNlaiBqYWtvtmNpIHN0YW5kYXJkb3dlIG9iaWVrdHl3eS4gQmFyZHpvIHByb3N0YSBvYnOzdWdhLiBEdb95IHdpemplciAtIGJlemtvbmt1cmVuY3lqbnkgdyBwb3Lzd25hbml1IGRvIGlubnljaCBtYXJlayBsdXN0cnphbmVrLiBOaXNraWUgc3p1bXkgZHpp6mtpIG9ncmFuaWN6ZW5pdSByb3pkemllbGN6b7ZjaSBtYXRyeWN5LiA8L3A+Cgk8L2Rpdj4KCTxkaXYgY2xhc3M9ImNvbW1lbnQtdGV4dCI+CgkgICAgPHA+PGI+UG9kc3Vtb3dhbmllOjwvYj4gQmFyZHpvIGRvYnJ5IGFwYXJhdCBkbyB6YXN0b3Nvd2HxIGFtYXRvcnNraWNoLiBSb3pzsWRlayB6d3ljaeq/ebMgaSB6YWtv8WN6b25vIG5pZXBvdHJ6ZWJusSBwb2dv8SB6YSByb3pkemllbGN6b7ZjabEgLSB0ZSA2bXAgamVzdCBpIHRhayB6YSBkdb9vIGNoeWJhIL9lIGt0b7Ygcm9iaSBvZGJpdGtpIHdpZWxrb7ZjaSBBMi4gIDwvcD4KCTwvZGl2PgoJCiAgICA8L2Rpdj4KPC9saT48IS0tICNjb21tZW50LSMjIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoJPC9vbD4KCQkJCSAgPCEtLSBFTkQuIGNvbW1lbnQtYmxvY2sgY29tbWVudC1yZXZpZXdzIC0tPiAgCgkJCQkgICAgICA8L2Rpdj4KCQkJCSAgPCEtLSBFTkQgLnBhbmVsLWNvbnRlbnQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gRU5EIC5jb250ZW50LXBhbmVsIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJPEEgbmFtZT0iZG9kYWoiPjwvQT4KCQkKCTwhLS0gRU5EIC5tYWluLWFydGljbGUtY29udGVudCAtLT4gCiAgICAgIDwvZGl2PgoJCQogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEVORCAubWFpbi1jb250ZW50LWxlZnQgLS0+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0gQkVHSU4gLm1haW4tY29udGVudC1yaWdodC5zaWRlYmFyLXJpZ2h0IC0tPgo8ZGl2IGNsYXNzPSJtYWluLWNvbnRlbnQtcmlnaHQgc2lkZWJhci1yaWdodCI+CgogICAgPCEtLSBCRUdJTiAubWFpbi1ub3NwbGl0IC0tPgogICAgPGRpdiBjbGFzcz0ibWFpbi1ub3NwbGl0Ij4KICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCI+CiAgICAgICAgICAgIDxoMz5Ob3dlIHRlc3R5PC9oMz4JCQogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idG9wLXJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC9UZXN0eV9hcGFyYXTzd19UZXN0eV9vYmlla3R5d/N3X1Rlc3R5X2xvcm5ldGVrX0lubmVfdGVzdHkuaHRtbCI+V3N6eXN0a2llIHRlc3R5PC9hPgoJCTwvZGl2PgoKCSAgPCEtLSBCRUdJTiAuYXJ0aWNsZS1taWRkbGUtYmxvY2sgLS0+CgkJPGRpdiBjbGFzcz0iYXJ0aWNsZS1zaWRlLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXBob3RvIj4KCQkJCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzUwOC4xLVRlc3RfYXBhcmF0dS1UZXN0X0Z1amlmaWxtX1gtTTUuaHRtbCI+PGltZyBzcmM9ImFwYXJhdHlfaW1hZ2UvbWVudV8xMzYwNF94bTUtYmF6YTEuanBnIiBjbGFzcz0ic2V0Ym9yZGVyIiBhbHQ9IlRlc3QgRnVqaWZpbG0gWC1NNSIgdGl0bGU9IlRlc3QgRnVqaWZpbG0gWC1NNSIgLz48L2E+CgkJCQogICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKCQkJCQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzUwOC4xLVRlc3RfYXBhcmF0dS1UZXN0X0Z1amlmaWxtX1gtTTUuaHRtbCI+VGVzdCBGdWppZmlsbSBYLU01PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1saW5rcyI+CgkJCTxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzUwOC4xMS1UZXN0X2FwYXJhdHUtVGVzdF9GdWppZmlsbV9YLU01Lmh0bWwiIGNsYXNzPSJhcnRpY2xlLWljb24tbGluayI+PGkgY2xhc3M9ImZhIGZhLWNvbW1lbnQiPjwvaT5Lb21lbnRhcnplOiA4PC9hPgoJCQk8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC81MDguMS1UZXN0X2FwYXJhdHUtVGVzdF9GdWppZmlsbV9YLU01Lmh0bWwiIGNsYXNzPSJhcnRpY2xlLWljb24tbGluayI+PGkgY2xhc3M9ImZhIGZhLWJhci1jaGFydC1vIj48L2k+Q3p5dGFqIHRlc3Q8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJCiAgICAgICAgICAgICAgICA8IS0tIEVORCAuYXJ0aWNsZS1taWRkbGUtYmxvY2sgLS0+CgkJPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYXJ0aWNsZS1hcnJheSBjb250ZW50LWNhdGVnb3J5Ij4KCSAgPGxpPgoJCTxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzU5OS4xLVRlc3Rfb2JpZWt0eXd1LVRlc3RfU2FteWFuZ19BRl8zNS0xNTBfbW1fZl8yLTIuOF9GRS5odG1sIj5UZXN0IFNhbXlhbmcgQUYgMzUtMTUwIG1tIGYvMi0yLjggRkU8L2E+CgkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvNTk5LjEzLVRlc3Rfb2JpZWt0eXd1LVRlc3RfU2FteWFuZ19BRl8zNS0xNTBfbW1fZl8yLTIuOF9GRS5odG1sIiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjIyPC9hPgogICAgICAgICAgICAgIDwvbGk+PGxpPgoJCTxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzM4OS1UZXN0X2xvcm5ldGtpLVRlc3RfVm9ydGV4X1Jhem9yX0hEXzEweDUwLmh0bWwiPlRlc3QgVm9ydGV4IFJhem9yIEhEIDEweDUwPC9hPgoJCTxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzM4OS1UZXN0X2xvcm5ldGtpLVRlc3RfVm9ydGV4X1Jhem9yX0hEXzEweDUwLmh0bWwja29tZW50YXJ6IiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjI3PC9hPgogICAgICAgICAgICAgIDwvbGk+PGxpPgoJCTxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzk5LjEtSW5uZV90ZXN0eS1GdWppZmlsbV9YLU01Xy1fdGVzdF90cnlidV9maWxtb3dlZ28uaHRtbCI+RnVqaWZpbG0gWC1NNSAtIHRlc3QgdHJ5YnUgZmlsbW93ZWdvPC9hPgoJCTxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzk5LjYtSW5uZV90ZXN0eS1GdWppZmlsbV9YLU01Xy1fdGVzdF90cnlidV9maWxtb3dlZ28uaHRtbCIgY2xhc3M9ImNvbW1lbnQtaWNvbiI+PGkgY2xhc3M9ImZhIGZhLWNvbW1lbnQiPjwvaT4xMjwvYT4KICAgICAgICAgICAgICA8L2xpPjxsaT4KCQk8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC82MDUuMS1UZXN0X29iaWVrdHl3dS1UZXN0X1RhbXJvbl85MF9tbV9mXzIuOF9EaV9JSUlfTWFjcm9fVlhELmh0bWwiPlRlc3QgVGFtcm9uIDkwIG1tIGYvMi44IERpIElJSSBNYWNybyBWWEQ8L2E+CgkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvNjA1LjEzLVRlc3Rfb2JpZWt0eXd1LVRlc3RfVGFtcm9uXzkwX21tX2ZfMi44X0RpX0lJSV9NYWNyb19WWEQuaHRtbCIgY2xhc3M9ImNvbW1lbnQtaWNvbiI+PGkgY2xhc3M9ImZhIGZhLWNvbW1lbnQiPjwvaT42MjwvYT4KICAgICAgICAgICAgICA8L2xpPjxsaT4KCQk8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC85OC4xLUlubmVfdGVzdHktU29ueV9QWFctWjIwMF8tX3Rlc3Rfa2FtZXJ5Lmh0bWwiPlNvbnkgUFhXLVoyMDAgLSB0ZXN0IGthbWVyeTwvYT4KCQk8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC85OC42LUlubmVfdGVzdHktU29ueV9QWFctWjIwMF8tX3Rlc3Rfa2FtZXJ5Lmh0bWwiIGNsYXNzPSJjb21tZW50LWljb24iPjxpIGNsYXNzPSJmYSBmYS1jb21tZW50Ij48L2k+MjU8L2E+CiAgICAgICAgICAgICAgPC9saT4JICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CQoJPC9kaXY+ICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiYW5uZXItYmxvY2siPgogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIj4KICAgICAgICAgICAgPGgzPk5vd2UgYXJ0eWt1s3k8L2gzPgkJCiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3AtcmlnaHQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsL2FydHlrdSVDNSU4MnkuaHRtbCI+V3N6eXN0a2llIGFydHlrdbN5PC9hPgoJCTwvZGl2PgogPCEtLSBCRUdJTiAuYXJ0aWNsZS1taWRkbGUtYmxvY2sgLS0+CgkJPGRpdiBjbGFzcz0iYXJ0aWNsZS1zaWRlLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXBob3RvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvOTgwLjEtYXJ0eWt1sy1IaXN0b3JpYV9qZWRuZWpfZm90b2dyYWZpaV8tX0ImIzMyMjsmIzI4MTtraXRuYV9LdWxrYS5odG1sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJ1cGxvYWQyL21lbnVfMjk0MDY4X01hcmJsZV9uZXdzLmpwZyIgY2xhc3M9InNldGJvcmRlciIgYWx0PSJIaXN0b3JpYSBqZWRuZWogZm90b2dyYWZpaSAtIEKz6mtpdG5hIEt1bGthIiB0aXRsZT0iSGlzdG9yaWEgamVkbmVqIGZvdG9ncmFmaWkgLSBCs+praXRuYSBLdWxrYSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKCQkJCQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzk4MC4xLWFydHlrdbMtSGlzdG9yaWFfamVkbmVqX2ZvdG9ncmFmaWlfLV9CJiMzMjI7JiMyODE7a2l0bmFfS3Vsa2EuaHRtbCI+SGlzdG9yaWEgamVkbmVqIGZvdG9ncmFmaWkgLSBCs+praXRuYSBLdWxrYTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtbGlua3MiPgoJCQk8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC85ODAuMi1hcnR5a3WzLUhpc3RvcmlhX2plZG5lal9mb3RvZ3JhZmlpXy1fQiYjMzIyOyYjMjgxO2tpdG5hX0t1bGthLmh0bWwiIGNsYXNzPSJhcnRpY2xlLWljb24tbGluayI+PGkgY2xhc3M9ImZhIGZhLWNvbW1lbnQiPjwvaT5Lb21lbnRhcnplOiA2OTwvYT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvOTgwLjEtYXJ0eWt1sy1IaXN0b3JpYV9qZWRuZWpfZm90b2dyYWZpaV8tX0ImIzMyMjsmIzI4MTtraXRuYV9LdWxrYS5odG1sIiBjbGFzcz0iYXJ0aWNsZS1pY29uLWxpbmsiPjxpIGNsYXNzPSJmYSBmYS1hcnJvdy1yaWdodCI+PC9pPkN6eXRhaiBhcnR5a3WzPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJCQogICAgICAgICAgICAgICAgPCEtLSBFTkQgLmFydGljbGUtbWlkZGxlLWJsb2NrIC0tPgoJCTwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImFydGljbGUtYXJyYXkgY29udGVudC1jYXRlZ29yeSI+CgkJICAgIDxsaT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvOTg1LjEtYXJ0eWt1sy1OaWtvbl8xMHgyNV9TVEFCSUxJWkVEXy1fX2N6eV9tYSYjMzIyO3lfbW8mIzM4MDtlX3dpJiMyODE7Y2VqXy5odG1sIj5OaWtvbiAxMHgyNSBTVEFCSUxJWkVEIC0gIGN6eSBtYbN5IG1vv2Ugd2nqY2VqPzwvYT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvOTg1LjItYXJ0eWt1sy1OaWtvbl8xMHgyNV9TVEFCSUxJWkVEXy1fX2N6eV9tYSYjMzIyO3lfbW8mIzM4MDtlX3dpJiMyODE7Y2VqXy5odG1sIiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjM0PC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CgkKCQkgICAgPGxpPgoJCQk8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC85ODQuMS1hcnR5a3WzLUNhbm9uX0VPU19SMV9va2llbV9mb3RvZ3JhZmFfc3BvcnRvd2Vnb18mIzgyMTE7XyYjMzIxO3VrYXN6YV9Ta3dpb3RhLmh0bWwiPkNhbm9uIEVPUyBSMSBva2llbSBmb3RvZ3JhZmEgc3BvcnRvd2VnbyAmIzgyMTE7IKN1a2FzemEgU2t3aW90YTwvYT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvOTg0LjItYXJ0eWt1sy1DYW5vbl9FT1NfUjFfb2tpZW1fZm90b2dyYWZhX3Nwb3J0b3dlZ29fJiM4MjExO18mIzMyMTt1a2FzemFfU2t3aW90YS5odG1sIiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjYyPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CgkKCQkgICAgPGxpPgoJCQk8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC85NTYuMS1hcnR5a3WzLUhpc3RvcmlhX2plZG5lal9mb3RvZ3JhZmlpXy1fQ3omIzMyMjtvd2lla19uYV9Lc2kmIzI4MTsmIzM4MDt5Y3UuaHRtbCI+SGlzdG9yaWEgamVkbmVqIGZvdG9ncmFmaWkgLSBDerNvd2llayBuYSBLc2nqv3ljdTwvYT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvOTU2LjQtYXJ0eWt1sy1IaXN0b3JpYV9qZWRuZWpfZm90b2dyYWZpaV8tX0N6JiMzMjI7b3dpZWtfbmFfS3NpJiMyODE7JiMzODA7eWN1Lmh0bWwiIGNsYXNzPSJjb21tZW50LWljb24iPjxpIGNsYXNzPSJmYSBmYS1jb21tZW50Ij48L2k+MTEzPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CgkKCQkgICAgPGxpPgoJCQk8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC85ODIuMS1hcnR5a3WzLUFwYXJhdHlfJiMzNDc7cmVkbmlvZm9ybWF0b3dlX0Z1amlmaWxtX0dGWC5odG1sIj5BcGFyYXR5ILZyZWRuaW9mb3JtYXRvd2UgRnVqaWZpbG0gR0ZYPC9hPgoJCQk8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC85ODIuMi1hcnR5a3WzLUFwYXJhdHlfJiMzNDc7cmVkbmlvZm9ybWF0b3dlX0Z1amlmaWxtX0dGWC5odG1sIiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjEwNjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoJCgkJICAgIDxsaT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvOTgxLjEtYXJ0eWt1sy1Tb255X0ExX0lJX2lfMjgtNzBfbW1fZl8yX3dfbmFzenljaF9yJiMyODE7a2FjaC5odG1sIj5Tb255IEExIElJIGkgMjgtNzAgbW0gZi8yIHcgbmFzenljaCBy6mthY2g8L2E+CgkJCTxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzk4MS4yLWFydHlrdbMtU29ueV9BMV9JSV9pXzI4LTcwX21tX2ZfMl93X25hc3p5Y2hfciYjMjgxO2thY2guaHRtbCIgY2xhc3M9ImNvbW1lbnQtaWNvbiI+PGkgY2xhc3M9ImZhIGZhLWNvbW1lbnQiPjwvaT4yMzwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoJICAgICAgICAgICAgICAgIDwvdWw+CgogICAgICAgICAgICA8L2Rpdj4JCgk8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJiYW5uZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFubmVyLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgkKCiAgICA8IS0tIEVORCAubWFpbi1ub3NwbGl0IC0tPgogICAgPC9kaXY+CiAgICAKICAgICA8IS0tIEJFR0lOIC5tYWluLWNvbnRlbnQtc3BsaXQgLS0+CiAgICAgPGRpdiBjbGFzcz0ibWFpbi1jb250ZW50LXNwbGl0Ij4KICAgICAgICAgCiAgICAgICAgICAgIDwhLS0gQkVHSU4gLm1haW4tc3BsaXQtbGVmdCAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbi1zcGxpdC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPCEtLSBFTkQgLm1haW4tc3BsaXQtbGVmdCAtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgICAgICA8IS0tIEJFR0lOIC5tYWluLXNwbGl0LWxlZnQgLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4tc3BsaXQtcmlnaHQiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPCEtLSBFTkQgLm1haW4tc3BsaXQtcmlnaHQgLS0+CiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgIAogICAgIAogICAgPCEtLSBFTkQgLm1haW4tY29udGVudC1zcGxpdCAtLT4KICAgIDwvZGl2PgogICAgIAogICAgPCEtLSBCRUdJTiAubWFpbi1ub3NwbGl0IC0tPgogICAgPGRpdiBjbGFzcz0ibWFpbi1ub3NwbGl0Ij4gICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0id2lkZ2V0LTQgcGFuZWwiPgogICAgICAgICAgICA8aDM+TmFqY3rqtmNpZWogY3p5dGFuZTwvaDM+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImFydGljbGUtYXJyYXkgY29udGVudC1jYXRlZ29yeSI+CjxsaT4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzU5OS4xLVRlc3Rfb2JpZWt0eXd1LVNhbXlhbmdfQUZfMzUtMTUwX21tX2ZfMi0yLjhfRkUuaHRtbCI+VGVzdCBTYW15YW5nIEFGIDM1LTE1MCBtbSBmLzItMi44IEZFPC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvNTk5LjEzLVRlc3Rfb2JpZWt0eXd1LVNhbXlhbmdfQUZfMzUtMTUwX21tX2ZfMi0yLjhfRkUuaHRtbCNrb21lbnRhcnplIiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjIyPC9hPgogICAgICAgICAgICAgICAgPC9saT4KCSAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvMjA3MTktbmV3cy1PX3R5bV9zaSYjMjgxO19tJiMyNDM7d2lfX2N6eWxpX3Bsb3RraV9pX3Bsb3RlY3praV96X29zdGF0bmllZ29fdHlnb2RuaWEuaHRtbCI+TyB0eW0gc2nqIG3zd2ksIGN6eWxpIHBsb3RraSBpIHBsb3RlY3praSB6IG9zdGF0bmllZ28gdHlnb2RuaWE8L2E+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC8yMDcxOS1uZXdzLU9fdHltX3NpJiMyODE7X20mIzI0Mzt3aV9fY3p5bGlfcGxvdGtpX2lfcGxvdGVjemtpX3pfb3N0YXRuaWVnb190eWdvZG5pYS5odG1sI2tvbWVudGFyemUiIGNsYXNzPSJjb21tZW50LWljb24iPjxpIGNsYXNzPSJmYSBmYS1jb21tZW50Ij48L2k+NzQ8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgoJICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC8yMDczMi1uZXdzLU5vd2FfbWF0cnljYV9vZF9DYW5vbmEuaHRtbCI+Tm93YSBtYXRyeWNhIG9kIENhbm9uYTwvYT4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzIwNzMyLW5ld3MtTm93YV9tYXRyeWNhX29kX0Nhbm9uYS5odG1sI2tvbWVudGFyemUiIGNsYXNzPSJjb21tZW50LWljb24iPjxpIGNsYXNzPSJmYSBmYS1jb21tZW50Ij48L2k+Mzk8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgoJICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC8yMDcyMC1uZXdzLUFydGl6bGFiX0NsYXNzaWNfMzVfbW1fZl8xLjQuaHRtbCI+QXJ0aXpsYWIgQ2xhc3NpYyAzNSBtbSBmLzEuNDwvYT4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzIwNzIwLW5ld3MtQXJ0aXpsYWJfQ2xhc3NpY18zNV9tbV9mXzEuNC5odG1sI2tvbWVudGFyemUiIGNsYXNzPSJjb21tZW50LWljb24iPjxpIGNsYXNzPSJmYSBmYS1jb21tZW50Ij48L2k+MzY8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgoJICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC85OS4xLUlubmVfdGVzdHktRnVqaWZpbG1fWC1NNV8tX3Rlc3RfdHJ5YnVfZmlsbW93ZWdvLmh0bWwiPkZ1amlmaWxtIFgtTTUgLSB0ZXN0IHRyeWJ1IGZpbG1vd2VnbzwvYT4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzk5LjYtSW5uZV90ZXN0eS1GdWppZmlsbV9YLU01Xy1fdGVzdF90cnlidV9maWxtb3dlZ28uaHRtbCNrb21lbnRhcnplIiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjEyPC9hPgogICAgICAgICAgICAgICAgPC9saT4KCSAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvMjA3MzYtbmV3cy1DYW5vbl9SRl8xNi0yOF9tbV9mXzIuOF9JU19TVE0uaHRtbCI+Q2Fub24gUkYgMTYtMjggbW0gZi8yLjggSVMgU1RNPC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvMjA3MzYtbmV3cy1DYW5vbl9SRl8xNi0yOF9tbV9mXzIuOF9JU19TVE0uaHRtbCNrb21lbnRhcnplIiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjQ1PC9hPgogICAgICAgICAgICAgICAgPC9saT4KCSAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvNTA4LjEtVGVzdF9hcGFyYXR1LUZ1amlmaWxtX1gtTTUuaHRtbCI+VGVzdCBGdWppZmlsbSBYLU01PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvNTA4LjExLVRlc3RfYXBhcmF0dS1GdWppZmlsbV9YLU01Lmh0bWwja29tZW50YXJ6ZSIgY2xhc3M9ImNvbW1lbnQtaWNvbiI+PGkgY2xhc3M9ImZhIGZhLWNvbW1lbnQiPjwvaT44PC9hPgogICAgICAgICAgICAgICAgPC9saT4KCSAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvOTgwLjEtYXJ0eWt1sy1IaXN0b3JpYV9qZWRuZWpfZm90b2dyYWZpaV8tX0ImIzMyMjsmIzI4MTtraXRuYV9LdWxrYS5odG1sIj5IaXN0b3JpYSBqZWRuZWogZm90b2dyYWZpaSAtIEKz6mtpdG5hIEt1bGthPC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvOTgwLjItYXJ0eWt1sy1IaXN0b3JpYV9qZWRuZWpfZm90b2dyYWZpaV8tX0ImIzMyMjsmIzI4MTtraXRuYV9LdWxrYS5odG1sI2tvbWVudGFyemUiIGNsYXNzPSJjb21tZW50LWljb24iPjxpIGNsYXNzPSJmYSBmYS1jb21tZW50Ij48L2k+Njk8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgoJICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CQogICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgIAk8ZGl2IGNsYXNzPSJwYW5lbCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiYW5uZXItYmxvY2siPgogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+Cgk8ZGl2IGNsYXNzPSJ3aWRnZXQtNCBwYW5lbCI+CiAgICAgICAgICAgIDxoMz5Pc3RhdG5pbyBrb21lbnRvd2FuZTwvaDM+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImFydGljbGUtYXJyYXkgY29udGVudC1jYXRlZ29yeSI+CjxsaT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvNTA4LjExLVRlc3RfYXBhcmF0dS1UZXN0X0Z1amlmaWxtX1gtTTUuaHRtbCIgdGl0bGU9IlRlc3QgRnVqaWZpbG0gWC1NNSI+VGVzdCBGdWppZmlsbSBYLU01PC9hPgoJCQk8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC81MDguMTEtVGVzdF9hcGFyYXR1LVRlc3RfRnVqaWZpbG1fWC1NNS5odG1sIiB0aXRsZT0iVGVzdCBGdWppZmlsbSBYLU01IiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjg8L2E+CiAgICAgICAgICAgICAgPC9saT48bGk+CgkJCTxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzM4OS1UZXN0X2xvcm5ldGtpLVRlc3RfVm9ydGV4X1Jhem9yX0hEXzEweDUwLmh0bWwiIHRpdGxlPSJUZXN0IFZvcnRleCBSYXpvciBIRCAxMHg1MCI+VGVzdCBWb3J0ZXggUmF6b3IgSEQgMTB4NTA8L2E+CgkJCTxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzM4OS1UZXN0X2xvcm5ldGtpLVRlc3RfVm9ydGV4X1Jhem9yX0hEXzEweDUwLmh0bWwiIHRpdGxlPSJUZXN0IFZvcnRleCBSYXpvciBIRCAxMHg1MCIgY2xhc3M9ImNvbW1lbnQtaWNvbiI+PGkgY2xhc3M9ImZhIGZhLWNvbW1lbnQiPjwvaT4yNzwvYT4KICAgICAgICAgICAgICA8L2xpPjxsaT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvOTgwLjItYXJ0eWt1sy1IaXN0b3JpYV9qZWRuZWpfZm90b2dyYWZpaV8tX0ImIzMyMjsmIzI4MTtraXRuYV9LdWxrYS5odG1sIiB0aXRsZT0iSGlzdG9yaWEgamVkbmVqIGZvdG9ncmFmaWkgLSBCs+praXRuYSBLdWxrYSI+SGlzdG9yaWEgamVkbmVqIGZvdG9ncmFmaWkgLSBCs+praXRuYSBLdWxrYTwvYT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvOTgwLjItYXJ0eWt1sy1IaXN0b3JpYV9qZWRuZWpfZm90b2dyYWZpaV8tX0ImIzMyMjsmIzI4MTtraXRuYV9LdWxrYS5odG1sIiB0aXRsZT0iSGlzdG9yaWEgamVkbmVqIGZvdG9ncmFmaWkgLSBCs+praXRuYSBLdWxrYSIgY2xhc3M9ImNvbW1lbnQtaWNvbiI+PGkgY2xhc3M9ImZhIGZhLWNvbW1lbnQiPjwvaT42OTwvYT4KICAgICAgICAgICAgICA8L2xpPjxsaT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvODcuNi1Jbm5lX3Rlc3R5LVRlc3RfQ2Fub25fTVMtNTAwXy1fdGVzdF9rYW1lcnkuaHRtbCIgdGl0bGU9IlRlc3QgQ2Fub24gTVMtNTAwIC0gdGVzdCBrYW1lcnkiPlRlc3QgQ2Fub24gTVMtNTAwIC0gdGVzdCBrYW1lcnk8L2E+CgkJCTxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzg3LjYtSW5uZV90ZXN0eS1UZXN0X0Nhbm9uX01TLTUwMF8tX3Rlc3Rfa2FtZXJ5Lmh0bWwiIHRpdGxlPSJUZXN0IENhbm9uIE1TLTUwMCAtIHRlc3Qga2FtZXJ5IiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjIyPC9hPgogICAgICAgICAgICAgIDwvbGk+PGxpPgoJCQk8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC81OTkuMTMtVGVzdF9vYmlla3R5d3UtVGVzdF9TYW15YW5nX0FGXzM1LTE1MF9tbV9mXzItMi44X0ZFLmh0bWwiIHRpdGxlPSJUZXN0IFNhbXlhbmcgQUYgMzUtMTUwIG1tIGYvMi0yLjggRkUiPlRlc3QgU2FteWFuZyBBRiAzNS0xNTAgbW0gZi8yLTIuOCBGRTwvYT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvNTk5LjEzLVRlc3Rfb2JpZWt0eXd1LVRlc3RfU2FteWFuZ19BRl8zNS0xNTBfbW1fZl8yLTIuOF9GRS5odG1sIiB0aXRsZT0iVGVzdCBTYW15YW5nIEFGIDM1LTE1MCBtbSBmLzItMi44IEZFIiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjIyPC9hPgogICAgICAgICAgICAgIDwvbGk+PGxpPgoJCQk8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC81OTguMTMtVGVzdF9vYmlla3R5d3UtVGVzdF9UYW1yb25fMzUtMTUwX21tX2ZfMi0yLjhfRGlfSUlJX1ZYRC5odG1sIiB0aXRsZT0iVGVzdCBUYW1yb24gMzUtMTUwIG1tIGYvMi0yLjggRGkgSUlJIFZYRCI+VGVzdCBUYW1yb24gMzUtMTUwIG1tIGYvMi0yLjggRGkgSUlJIFZYRDwvYT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvNTk4LjEzLVRlc3Rfb2JpZWt0eXd1LVRlc3RfVGFtcm9uXzM1LTE1MF9tbV9mXzItMi44X0RpX0lJSV9WWEQuaHRtbCIgdGl0bGU9IlRlc3QgVGFtcm9uIDM1LTE1MCBtbSBmLzItMi44IERpIElJSSBWWEQiIGNsYXNzPSJjb21tZW50LWljb24iPjxpIGNsYXNzPSJmYSBmYS1jb21tZW50Ij48L2k+NTc8L2E+CiAgICAgICAgICAgICAgPC9saT48bGk+CgkJCTxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzQ4Mi4xMS1UZXN0X2FwYXJhdHUtVGVzdF9GdWppZmlsbV9YLUgyLmh0bWwiIHRpdGxlPSJUZXN0IEZ1amlmaWxtIFgtSDIiPlRlc3QgRnVqaWZpbG0gWC1IMjwvYT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvNDgyLjExLVRlc3RfYXBhcmF0dS1UZXN0X0Z1amlmaWxtX1gtSDIuaHRtbCIgdGl0bGU9IlRlc3QgRnVqaWZpbG0gWC1IMiIgY2xhc3M9ImNvbW1lbnQtaWNvbiI+PGkgY2xhc3M9ImZhIGZhLWNvbW1lbnQiPjwvaT4zNTwvYT4KICAgICAgICAgICAgICA8L2xpPjxsaT4KCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvOTkuNi1Jbm5lX3Rlc3R5LVRlc3RfRnVqaWZpbG1fWC1NNV8tX3Rlc3RfdHJ5YnVfZmlsbW93ZWdvLmh0bWwiIHRpdGxlPSJUZXN0IEZ1amlmaWxtIFgtTTUgLSB0ZXN0IHRyeWJ1IGZpbG1vd2VnbyI+VGVzdCBGdWppZmlsbSBYLU01IC0gdGVzdCB0cnlidSBmaWxtb3dlZ288L2E+CgkJCTxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzk5LjYtSW5uZV90ZXN0eS1UZXN0X0Z1amlmaWxtX1gtTTVfLV90ZXN0X3RyeWJ1X2ZpbG1vd2Vnby5odG1sIiB0aXRsZT0iVGVzdCBGdWppZmlsbSBYLU01IC0gdGVzdCB0cnlidSBmaWxtb3dlZ28iIGNsYXNzPSJjb21tZW50LWljb24iPjxpIGNsYXNzPSJmYSBmYS1jb21tZW50Ij48L2k+MTI8L2E+CiAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICA8L3VsPgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CTxkaXYgY2xhc3M9InBhbmVsIj4KICAgICAgICAgICAgICAgPGgzPk9zdGF0bmlvIG9jZW5pYW5lPC9oMz4JCQogICAgICAgICAgICAgICA8ZGl2PgoKCSAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1zaWRlLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXBob3RvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvMjE2Ni1Tb255X0RTQy1SWDEwX0lWLXNwZWN5ZmlrYWNqYV9hcGFyYXR1Lmh0bWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9hcGFyYXR5X2ltYWdlL21lbnVfMTEyNjFfcngxMDQtMS5qcGciIGNsYXNzPSJzZXRib3JkZXIiIGFsdD0iU29ueSBEU0MtUlgxMCBJViIgdGl0bGU9IlNvbnkgRFNDLVJYMTAgSVYiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCgogICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzIxNjYtU29ueV9EU0MtUlgxMF9JVi1zcGVjeWZpa2FjamFfYXBhcmF0dS5odG1sIj5Tb255IERTQy1SWDEwIElWPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1yYXRpbmciPgoJCQkJPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCQkJCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkJCQk8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJCQkJPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGluZy1maWxsIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyLWhhbGYiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtbGlua3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC8yMTY2LVNvbnlfRFNDLVJYMTBfSVYtc3BlY3lmaWthY2phX2FwYXJhdHUuaHRtbCNvY2VueSIgY2xhc3M9ImFydGljbGUtaWNvbi1saW5rIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1jb21tZW50Ij48L2k+T2Nlbnk6IDUKICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC8yMTY2LVNvbnlfRFNDLVJYMTBfSVYtc3BlY3lmaWthY2phX2FwYXJhdHUuaHRtbCIgY2xhc3M9ImFydGljbGUtaWNvbi1saW5rIj48aSBjbGFzcz0iZmEgZmEtZmlsZS10ZXh0LW8iPjwvaT5ab2JhY3ogc3BlY3lmaWthY2rqPC9hPgogICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgIDwhLS0gRU5EIC5hcnRpY2xlLW1pZGRsZS1ibG9jayAtLT4KICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYXJ0aWNsZS1hcnJheSBjb250ZW50LWNhdGVnb3J5Ij4KCSAgCgkgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvMjA1My1DYW5vbl9SRl8yOF9tbV9mXzIuOF9TVE0tc3BlY3lmaWthY2phX29iaWVrdHl3dS5odG1sIj5DYW5vbiBSRiAyOCBtbSBmLzIuOCBTVE08L2E+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJhdGluZyI+CgkJCQk8IS0tIEJFR0lOIHN0YXJzIGJhY2tncm91bmQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJCQkJPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCQkJCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkJCQk8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gRU5EIHN0YXJzIGJhY2tncm91bmQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0aW5nLWZpbGwiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvMjA1My1DYW5vbl9SRl8yOF9tbV9mXzIuOF9TVE0tc3BlY3lmaWthY2phX29iaWVrdHl3dS5odG1sI29jZW55IiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KCSAgCgkgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvMjM2Ni1DYW5vbl9FT1NfUjEwLXNwZWN5ZmlrYWNqYV9hcGFyYXR1Lmh0bWwiPkNhbm9uIEVPUyBSMTA8L2E+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJhdGluZyI+CgkJCQk8IS0tIEJFR0lOIHN0YXJzIGJhY2tncm91bmQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJCQkJPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCQkJCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkJCQk8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gRU5EIHN0YXJzIGJhY2tncm91bmQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0aW5nLWZpbGwiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvMjM2Ni1DYW5vbl9FT1NfUjEwLXNwZWN5ZmlrYWNqYV9hcGFyYXR1Lmh0bWwjb2NlbnkiIGNsYXNzPSJjb21tZW50LWljb24iPjxpIGNsYXNzPSJmYSBmYS1jb21tZW50Ij48L2k+NjwvYT4KICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgoJICAKCSAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC8xMTgwLVRhbXJvbl8yOC0zMDBfbW1fRl8zLjUtNi4zX0RpX1ZDX1BaRF8oTW9kZWxfQTAxMClfLXNwZWN5ZmlrYWNqYV9vYmlla3R5d3UuaHRtbCI+VGFtcm9uIDI4LTMwMCBtbSBGLzMuNS02LjMgRGkgVkMgUFpEIChNb2RlbCBBMDEwKSA8L2E+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJhdGluZyI+CgkJCQk8IS0tIEJFR0lOIHN0YXJzIGJhY2tncm91bmQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJCQkJPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCQkJCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkJCQk8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gRU5EIHN0YXJzIGJhY2tncm91bmQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0aW5nLWZpbGwiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvMTE4MC1UYW1yb25fMjgtMzAwX21tX0ZfMy41LTYuM19EaV9WQ19QWkRfKE1vZGVsX0EwMTApXy1zcGVjeWZpa2FjamFfb2JpZWt0eXd1Lmh0bWwjb2NlbnkiIGNsYXNzPSJjb21tZW50LWljb24iPjxpIGNsYXNzPSJmYSBmYS1jb21tZW50Ij48L2k+MjwvYT4KICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgoJICAKCSAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC8xNDcyLVBhbmFzb25pY19MdW1peF9ETUMtRlM0MC1zcGVjeWZpa2FjamFfYXBhcmF0dS5odG1sIj5QYW5hc29uaWMgTHVtaXggRE1DLUZTNDA8L2E+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJhdGluZyI+CgkJCQk8IS0tIEJFR0lOIHN0YXJzIGJhY2tncm91bmQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJCQkJPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCQkJCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkJCQk8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gRU5EIHN0YXJzIGJhY2tncm91bmQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0aW5nLWZpbGwiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvMTQ3Mi1QYW5hc29uaWNfTHVtaXhfRE1DLUZTNDAtc3BlY3lmaWthY2phX2FwYXJhdHUuaHRtbCNvY2VueSIgY2xhc3M9ImNvbW1lbnQtaWNvbiI+PGkgY2xhc3M9ImZhIGZhLWNvbW1lbnQiPjwvaT40PC9hPgogICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CgkgIAoJICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzI2LVRhbXJvbl9TUF9BRl8xNy01MF9tbV9mXzIuOF9YUl9EaV9JSV9MRF9Bc3BoZXJpY2FsXyhJRiktc3BlY3lmaWthY2phX29iaWVrdHl3dS5odG1sIj5UYW1yb24gU1AgQUYgMTctNTAgbW0gZi8yLjggWFIgRGkgSUkgTEQgQXNwaGVyaWNhbCAoSUYpPC9hPjxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1yYXRpbmciPgoJCQkJPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCQkJCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkJCQk8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJCQkJPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGluZy1maWxsIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsLzI2LVRhbXJvbl9TUF9BRl8xNy01MF9tbV9mXzIuOF9YUl9EaV9JSV9MRF9Bc3BoZXJpY2FsXyhJRiktc3BlY3lmaWthY2phX29iaWVrdHl3dS5odG1sI29jZW55IiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjEzMTwvYT4KICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgoJICAKCSAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC8yMjAxLU5pa29uX1o3LXNwZWN5ZmlrYWNqYV9hcGFyYXR1Lmh0bWwiPk5pa29uIFo3PC9hPjxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1yYXRpbmciPgoJCQkJPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCQkJCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkJCQk8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJCQkJPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGluZy1maWxsIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyLWhhbGYiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC8yMjAxLU5pa29uX1o3LXNwZWN5ZmlrYWNqYV9hcGFyYXR1Lmh0bWwjb2NlbnkiIGNsYXNzPSJjb21tZW50LWljb24iPjxpIGNsYXNzPSJmYSBmYS1jb21tZW50Ij48L2k+MjwvYT4KICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgoJICAKCSAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC8xMDE3LU5pa29uX05pa2tvcl9BRi1TXzg1X21tX2ZfMS44R18tc3BlY3lmaWthY2phX29iaWVrdHl3dS5odG1sIj5OaWtvbiBOaWtrb3IgQUYtUyA4NSBtbSBmLzEuOEcgPC9hPjxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1yYXRpbmciPgoJCQkJPCEtLSBCRUdJTiBzdGFycyBiYWNrZ3JvdW5kIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KCQkJCTxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CgkJCQk8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoJCQkJPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEVORCBzdGFycyBiYWNrZ3JvdW5kIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGluZy1maWxsIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyLWhhbGYiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC8xMDE3LU5pa29uX05pa2tvcl9BRi1TXzg1X21tX2ZfMS44R18tc3BlY3lmaWthY2phX29iaWVrdHl3dS5odG1sI29jZW55IiBjbGFzcz0iY29tbWVudC1pY29uIj48aSBjbGFzcz0iZmEgZmEtY29tbWVudCI+PC9pPjIxPC9hPgogICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CgkgICAgIDwvdWw+CgogICAgICAgICAgICAgICA8L2Rpdj4JCiAgICAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJhbm5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiYW5uZXItYmxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxjZW50ZXI+PGZvbnQgc2l6ZT0xIGNvbG9yPSIjYzBjMGMwIj4tLS0tLSBSIEUgSyBMIEEgTSBBIC0tLS0tPC9mb250PjwvY2VudGVyPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnVjYW5kby5wbCIgdGFyZ2V0PV9ibGFuaz48aW1nIHNyYz0iYmFubmVyeS8zMDB4MTUwLmdpZiIgYWx0PSJDeuq2Y2kgZG8gc2Ftb2Nob2TzdyBVY2FuZG8ucGwiIHRpdGxlPSJDeuq2Y2kgZG8gc2Ftb2Nob2TzdyBVY2FuZG8ucGwiPjwvYT4gLS0+CgogICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAgCiAgICA8IS0tIEVORCAubWFpbi1ub3NwbGl0IC0tPgogICAgPC9kaXY+CiAgICAgCiAgICAgCjwhLS0gRU5EIC5tYWluLWNvbnRlbnQtcmlnaHQgLS0+CjwvZGl2PiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXItZmxvYXQiPjwvZGl2PgoKICAgICAgICAgICAgICAgIDwhLS0gRU5EIC53cmFwcGVyIC0tPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8IS0tIEVORCAuY29udGVudCAtLT4KICAgICAgICAgICAgPC9kaXY+CQoKICAgICAgICAgICAgPCEtLSBCRUdJTiAuZm9vdGVyIC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXIiPgoKICAgICAgICAgICAgICAgIDwhLS0gQkVHSU4gLndyYXBwZXIgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KCiAgICAgICAgICAgICAgICAgICAgPCEtLSBCRUdJTiAuZm9vdGVyLWNvbnRlbnQgLS0+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CgkJCSAgICAgIDxsaSBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXRheG9ub215IG1lbnUtaXRlbS1vYmplY3QtcG9zdF90YWciPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsL1N0cm9uYV9nJUM1JTgyJUMzJUIzd25hIiB0aXRsZT0iQWt0dWFsbm+2Y2kiPkFrdHVhbG5vtmNpPC9hPjwvbGk+CgkJCQk8bGkgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS10YXhvbm9teSBtZW51LWl0ZW0tb2JqZWN0LXBvc3RfdGFnIj48YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC9UZXN0eV9hcGFyYXQlQzMlQjN3X1Rlc3R5X29iaWVrdHl3JUMzJUIzd19UZXN0eV9sb3JuZXRla19Jbm5lX3Rlc3R5Lmh0bWwiIHRpdGxlPSJUZXN0eSBhcGFyYXTzdywgVGVzdHkgb2JpZWt0eXfzdyxUZXN0eSBsb3JuZXRlayxJbm5lIHRlc3R5Ij5UZXN0eTwvYT48L2xpPgoJCQkJPGxpIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtdGF4b25vbXkgbWVudS1pdGVtLW9iamVjdC1wb3N0X3RhZyI+PGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvYXJ0eWt1JUM1JTgyeS5odG1sIiB0aXRsZT0iQXJ0eWt1s3kiPkFydHlrdbN5PC9hPjwvbGk+CgkJCQk8bGkgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS10YXhvbm9teSBtZW51LWl0ZW0tb2JqZWN0LXBvc3RfdGFnIj48YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC9wb3JhZG5pa2kuaHRtbCIgdGl0bGU9IlBvcmFkbmlraSI+UG9yYWRuaWtpPC9hPjwvbGk+CgkJCQk8bGkgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS10YXhvbm9teSBtZW51LWl0ZW0tb2JqZWN0LXBvc3RfdGFnIj48YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC9hcGFyYXR5Lmh0bWwiIHRpdGxlPSJBcGFyYXR5Ij5BcGFyYXR5PC9hPjwvbGk+CgkJCQk8bGkgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS10YXhvbm9teSBtZW51LWl0ZW0tb2JqZWN0LXBvc3RfdGFnIj48YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC9vYmlla3R5d3kuaHRtbCIgdGl0bGU9Ik9iaWVrdHl3eSI+T2JpZWt0eXd5PC9hPjwvbGk+CgkJCQk8bGkgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS10YXhvbm9teSBtZW51LWl0ZW0tb2JqZWN0LXBvc3RfdGFnIj48YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC9sb3JuZXRraS5odG1sIiB0aXRsZT0iTG9ybmV0a2kiPkxvcm5ldGtpPC9hPjwvbGk+CgkJCQk8bGkgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS10YXhvbm9teSBtZW51LWl0ZW0tb2JqZWN0LXBvc3RfdGFnIj48YSBocmVmPSJodHRwczovL3d3dy5vcHR5Y3puZS5wbC9zJUM1JTgyb3duaWsuaHRtbCIgdGl0bGU9IlOzb3duaWN6ZWsiPlOzb3duaWN6ZWs8L2E+PC9saT4KCQkJCTxsaSBjbGFzcz0ibWVudS1pdGVtIG1lbnUtaXRlbS10eXBlLXRheG9ub215IG1lbnUtaXRlbS1vYmplY3QtcG9zdF90YWciPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wdHljem5lLnBsL3JhbmtpbmcuaHRtbCIgdGl0bGU9IlJhbmtpbmdpIj5SYW5raW5naTwvYT48L2xpPgoJCQkJPGxpIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtdGF4b25vbXkgbWVudS1pdGVtLW9iamVjdC1wb3N0X3RhZyI+PGEgaHJlZj0iaHR0cHM6Ly93d3cub3B0eWN6bmUucGwvZmFxLmh0bWwiIHRpdGxlPSJGQVEiPkZBUTwvYT48L2xpPgoJCQkJPGxpIGNsYXNzPSJtZW51LWl0ZW0gbWVudS1pdGVtLXR5cGUtdGF4b25vbXkgbWVudS1pdGVtLW9iamVjdC1wb3N0X3RhZyI+PGEgaHJlZj0iaHR0cHM6Ly9mb3J1bS5vcHR5Y3puZS5wbC8iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iRm9ydW0iPkZvcnVtPC9hPjwvbGk+CgkJCQk8bGkgY2xhc3M9Im1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS10YXhvbm9teSBtZW51LWl0ZW0tb2JqZWN0LXBvc3RfdGFnIj48YSBocmVmPSJodHRwczovL2ZvdG9taXNqZS5vcHR5Y3puZS5wbCIgdGl0bGU9IkZvdG9taXNqZSI+Rm90b21pc2plPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgkJCQkJCQkKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29weXJpZ2h0cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGVmdCI+IENvcHlyaWdodHMgJmNvcHk7MjAwNi0yMDI1IDxiPjxhIGhyZWY9Imh0dHA6Ly93d3cuY28tbmV0LnBsLyIgdGFyZ2V0PSJfYmxhbmsiPkNPLU5FVCBSb2JlcnQgT2xlY2g8L2E+PC9iPi48YnIgLz48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cm9uYSB3eWdlbmVyb3dhbmEgdyAwLjAyMyBzZWsuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFyYWdyYXBoIGNsZWFyZml4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlZGFrY2phIG5pZSBwb25vc2kgb2Rwb3dpZWR6aWFsbm+2Y2kgemEgZXdlbnR1YWxuZSBzemtvZHkgcG93c3Rhs2UgdyB3eW5pa3Ugdb95dGtvd2FuaWEgamFraWNoa29sd2llayB0ZWtzdPN3IGkgbWF0ZXJpYbPzdyBwdWJsaWtvd2FueWNoIHcgc2Vyd2lzaWUgT3B0eWN6bmUucGwuCld5ZGF3Y7EgT3B0eWN6bmUucGwgamVzdCBmaXJtYSBDTy1ORVQgUm9iZXJ0IE9sZWNoLiBBZHJlcyB3eWRhd2N5IG9yYXogcmVkYWtjamk6IHVsLiCvd2lya2kgaSBXaWd1cnkgMTEvMzQgODMtMDAwIFBydXN6Y3ogR2Rh8XNraQpLb3Bpb3dhbmllIGx1YiB3eWtvcnp5c3R5d2FuaWUgbWF0ZXJpYbPzdyBwdWJsaWtvd2FueWNoIG5hIHN0cm9uaWUgYmV6IHpnb2R5IGZpcm15IENPLU5FVCBSb2JlcnQgT2xlY2ggamVzdCB6YWJyb25pb25lLjxiciAvPjxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgU2Vyd2lzIE9wdHljem5lLnBsIHd5a29yenlzdHVqZSBwbGlraSBjb29raWVzLCBrdPNyZSBzsSB6YXBpc3l3YW5lIG5hIFR3b2ltIGtvbXB1dGVyemUuIFRlY2hub2xvZ2lhIHRhIGplc3Qgd3lrb3J6eXN0eXdhbmEgdyBjZWxhY2ggZnVua2Nqb25hbG55Y2gsIHN0YXR5c3R5Y3pueWNoIGkgcmVrbGFtb3d5Y2guIFBvendhbGEgbmFtIG9rcmW2bGHmIHphY2hvd2FuaWEgdb95dGtvd25pa/N3IG5hIHN0cm9uaWUsIGRvc3RhcmN6YeYgaW0gb2Rwb3dpZWRuaWUgdHJltmNpIG9yYXogcmVrbGFteSwgYSB0YWu/ZSB1s2F0d2lhIGtvcnp5c3RhbmllIHogc2Vyd2lzdSwgbnAuIHBvcHJ6ZXogZnVua2Nq6iBhdXRvbWF0eWN6bmVnbyBsb2dvd2FuaWEuIFBsaWtpIGNvb2tpZXMgbW9nsSB0Zb8gYnnmIHd5a29yenlzdHl3YW5lIHByemV6IHdzcPOzcHJhY3VqsWN5Y2ggeiBuYW1pIHJla2xhbW9kYXdj83csIGEgdGFrv2UgcHJ6ZXogbmFyeupkemllIEdvb2dsZSBBbmFseXRpY3MsIGt083JlIGplc3QgcHJ6ZXogbmFzIHd5a29yenlzdHl3YW5lIGRvIHpiaWVyYW5pYSBzdGF0eXN0eWsuIEtvcnp5c3RhbmllIHogc2Vyd2lzdSBPcHR5Y3puZS5wbCBwcnp5IHezsWN6b25laiBvYnOzdWR6ZSBwbGlr83cgY29va2llcyBqZXN0IHByemV6IG5hcyB0cmFrdG93YW5lLCBqYWtvIHd5cmG/ZW5pZSB6Z29keSBuYSB6YXBpc3l3YW5pZSBpY2ggdyBwYW1p6mNpIHVyerFkemVuaWEsIHoga3TzcmVnbyBrb3J6eXN0YXN6LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPk1hc3ogbW+/bGl3b7bmIHptaWFueSBwcmVmZXJlbmNqaSBkb3R5Y3qxY3ljaCBjaWFzdGVjemVrIHcgc3dvamVqIHByemVnbLFkYXJjZSBpbnRlcm5ldG93ZWouIEpltmxpIHdp6mMgbmllIHd5cmG/YXN6IHpnb2R5IG5hIHphcGlzeXdhbmllIHByemV6IG5hcyBwbGlr83cgY29va2llcyB3IHR3b2ltIHVyerFkemVuaXUgem1pZfEgdXN0YXdpZW5pYSBzd29qZWogcHJ6ZWdssWRhcmtpLCBsdWIgb3B1tuYgbmFzerEgd2l0cnlu6i48YnIgLz4KICBKZb9lbGkgbmllIHptaWVuaXN6IHR5Y2ggdXN0YXdpZfEgaSBi6mR6aWVzeiBuYWRhbCBrb3J6eXN0YbMgeiBuYXN6ZWogd2l0cnlueSwgYupkemllbXkgcHJ6ZXR3YXJ6YeYgVHdvamUgZGFuZSB6Z29kbmllIHogbmFzerEgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vb3B0eWN6bmUucGwvcG9saXR5a2FfcHJ5d2F0bm9zY2kucGRmIj5Qb2xpdHlrsSBQcnl3YXRub7ZjaTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJPGRpdiBpZD0iYWRibG9ja3N0YXR1cyIgc3R5bGU9InZpc2liaWxpdHk6aGlkZGVuOyI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhci1mbG9hdCI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDwhLS0gRU5EIC5mb290ZXItY29udGVudCAtLT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCgogICAgICAgICAgICAgICAgPCEtLSBFTkQgLndyYXBwZXIgLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwhLS0gRU5EIC5mb290ZXIgLS0+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICA8IS0tIEVORCAuYm94ZWQgLS0+CiAgICAgICAgPC9kaXY+CiAgICAgICAKCiAgICAgICAgPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnIHNyYz0nL2pzL2pxdWVyeS91aS9qcXVlcnkudWkuZWZmZWN0Lm1pbi5qcyc+PC9zY3JpcHQ+CiAgICAgICAgPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnIHNyYz0nL2pzL2pxdWVyeS9qcXVlcnkuY29va2llLmpzJz48L3NjcmlwdD4KICAgICAgICA8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCcgc3JjPScvanMvanF1ZXJ5L2pxdWVyeS5mbG9hdGluZ19wb3B1cC4xLjMubWluLmpzJz48L3NjcmlwdD4KICAgICAgICA8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCcgc3JjPScvanMvc2NyaXB0cy5qcyc+PC9zY3JpcHQ+CiAgICAgICAgPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnIHNyYz0nL2pzL21hc29ucnkucGtnZC5qcyc+PC9zY3JpcHQ+CiAgICAgICAgPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnIHNyYz0nL2pzL2pxdWVyeS9qcXVlcnkuaXNvdG9wZS5taW4uanMnPjwvc2NyaXB0PgogICAgICAgIDxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9Jy9qcy9saWdodGJveC0yLjYubWluLmpzJz48L3NjcmlwdD4KICAgICAgICA8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCcgc3JjPScvanMvanF1ZXJ5L2pxdWVyeS5pbmZpbml0ZXNjcm9sbC5taW4uanMnPjwvc2NyaXB0PgogICAgICAgIDxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9Jy9qcy9qcXVlcnkvanF1ZXJ5LmV2ZW50Lm1vdmUuanMnPjwvc2NyaXB0PgogICAgICAgIDxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9Jy9qcy9qcXVlcnkvanF1ZXJ5LmV2ZW50LnN3aXBlLmpzJz48L3NjcmlwdD4KICAgICAgICA8IS0tPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnIHNyYz0nL2pzL290X2dhbGxlcnkuanMnPjwvc2NyaXB0Pi0tPgogICAgICAgIDxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9Jy9qcy9zY3JpcHQuanMnPjwvc2NyaXB0PgogICAgICAgIDxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9Jy9qcy9hZGRjb21tZW50LmpzJz48L3NjcmlwdD4KCgo8IS0tYm9vc3QgdGhlIG5ld3MgLS0+CjwhLS0gPHNjcmlwdD53aW5kb3cuX2Jvb3N0dGhlbmV3cyA9IHsgczogJ0lNMDUzamhZcVcyQ05FWDZJOXJHJyB9OyhmdW5jdGlvbihkLCBzKSB7dmFyIG4gPSBkLmNyZWF0ZUVsZW1lbnQocyk7IG4uc3JjID0gIi8vMDAuYm9vc3R0aGVuZXdzLm5ldC90cmFjay5qcyI7dmFyIG8gPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsgby5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuLCBvKTt9KShkb2N1bWVudCwgJ3NjcmlwdCcpOzwvc2NyaXB0PiAtLT4KPCEtLWJvb3N0IHRoZSBuZXdzIC0tPgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgp2YXIgdHJhcF9hY3RpdmUgPSB0cnVlOwo8L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iYWRzZW5zZS5qcyI+PC9zY3JpcHQ+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+PCEtLQoKaWYgKHRyYXBfYWN0aXZlKSB7CgoKICB2YXIgY2hpcCA9IGRvY3VtZW50LmNvb2tpZTsKdmFyIGRlbnkgPSAwOyAgLy9zZXQgdGhpcyB0byAxIHRvIGRlbnkgYWNjZXNzIHdpdGggbm8gYWNjZXNzLiAgCiAgLy8gQSBkZW5pZWQgdXNlciB3aWxsIGdvIHRvIHBhZ2Ugc29ycnkuaHRtbC4KICAvLyBpZiB5b3UgZW5hYmxlIHRoaXMgZmVhdHVyZSB5b3UgbXVzdCBjcmVhdGUgYSBwYWdlIGNhbGxlZCAvc29ycnkuaHRtbAoKICBmdW5jdGlvbiBnZXRDb29raWUobmFtZSkgeyAKICAgIHZhciBpbmRleCA9IGNoaXAuaW5kZXhPZihuYW1lICsgIj0iKTsKICAgIGlmIChpbmRleCA9PSAtMSkgcmV0dXJuIG51bGw7CiAgICBpbmRleCA9IGNoaXAuaW5kZXhPZigiPSIsIGluZGV4KSArIDE7IC8vIGZpcnN0IGNoYXJhY3RlcgogICAgdmFyIGVuZHN0ciA9IGNoaXAuaW5kZXhPZigiOyIsIGluZGV4KTsKICAgIGlmIChlbmRzdHIgPT0gLTEpIGVuZHN0ciA9IGNoaXAubGVuZ3RoOyAvLyBsYXN0IGNoYXJhY3RlcgogICAgcmV0dXJuIHVuZXNjYXBlKGNoaXAuc3Vic3RyaW5nKGluZGV4LCBlbmRzdHIpKTsKICB9CgpmdW5jdGlvbiBoaWRlZGl2KCkgewppZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQpIHsgCmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3YXJuaW5nJykuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOwpkb2N1bWVudC5jb29raWUgPSAid2FybmVkPXRydWU7IFBBVEg9LyI7Cn0KfQoKZnVuY3Rpb24gY2xlYXJfY29va2llKCl7CmRvY3VtZW50LmNvb2tpZSA9ICAid2FybmVkPTsgUEFUSD0vIjsKfQoKLyoKaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKSB7CmlmICghZ2V0Q29va2llKCJ3YXJuZWQiKSkgewpkb2N1bWVudC53cml0ZSgiPGRpdiBpZD1cIndhcm5pbmdcIiBzdHlsZT1cIiAgei1pbmRleDogOTk5OyB2aXNpYmlsaXR5OmhpZGRlbjsgcG9zaXRpb246YWJzb2x1dGU7IGJhY2tncm91bmQ6ICNmZmZmYzA7IHdpZHRoOjExMzBweDsgaGVpZ2h0OiA1MCU7IGxlZnQ6IDUwJTsgbWFyZ2luLXJpZ2h0OiAtNTAlOyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsgdG9wOjUwJTsgcGFkZGluZzogNDBweCA0MHB4IDE0MHB4IDQwcHg7IGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOyBcIj4iKTsKZG9jdW1lbnQud3JpdGUoIjxwPjxjZW50ZXI+PGZvbnQgc2l6ZT01PjxiZT48Yj4hISEgV0GvTkUgISEhPGJyPiA8YnI+V3lnbLFkYSBuYSB0bywgv2Uga29yenlzdGFzeiB6IG9wcm9ncmFtb3dhbmlhIGJsb2t1arFjZWdvIHd5tndpZXRsYW5pZSByZWtsYW0uPC9iPjwvY2VudGVyPjwvZm9udD4iKTsKZG9jdW1lbnQud3JpdGUoIjxicj48YnI+PGltZyBzdHlsZT1cInBhZGRpbmctbGVmdDogMjBweDtcIiBoc3BhY2U9MjAgYWxpZ249cmlnaHQgc3JjPVwiYWRibG9jay5qcGdcIj4gPGZvbnQgc2l6ZT0zPk9wdHljem5lLnBsIGplc3Qgc2Vyd2lzZW0gdXRyenltdWqxY3ltIHNp6iBkemnqa2kgd3m2d2lldGxhbml1IHJla2xhbS4gUHJ6eWNob2R5IHogcmVrbGFtIHBvendhbGFqsSBuYW0gbmEgcG9rcnljaWUga29zenTzdyB6d2mxemFueWNoIHogdXRyenltYW5pZW0gc2Vyd2Vy83csIG9ws2FjZW5pZW0gb3PzYiBwcmFjdWqxY3ljaCB3IHJlZGFrY2ppLCBhIHRha79lIG5hIHpha3VwIHNwcnrqdHUga29tcHV0ZXJvd2VnbyBpIHd5cG9zYb9lbmllIHN0dWRpbywgdyBrdPNyeW0gcHJvd2FkemlteSB0ZXN0eS4gIik7CmRvY3VtZW50LndyaXRlKCI8cD48YnI+PGI+QupkemllbXkgd2R6aepjem5pLCBqZbZsaSBkb2Rhc3ogc3Ryb27qIE9wdHljem5lLnBsIGRvIHd5arF0a/N3IHcgZmlsdHJ6ZSBibG9rdWqxY3ltIHJla2xhbXkuPC9iPjxicj48YnI+WiBn83J5IGR6aeprdWplbXkgemEgenJvenVtaWVuaWUuPC9mb250PjwvcD4iKTsKZG9jdW1lbnQud3JpdGUoIjxwPjxicj48YnI+PGI+PGEgaHJlZj1cImphdmFzY3JpcHQ6aGlkZWRpdigpXCI+S2xpa25paiB0dXRhaiBhYnkgemFta26x5iB0byBva25vPC9hPi48L2I+PC9wPiIpOwpkb2N1bWVudC53cml0ZSgiPHA+PGJyPktvbXVuaWthdCBuaWUgd3m2d2lldGxpIHNp6iB3aepjZWogcG9kY3phcyB0ZWogc2VzamkgKHd5bWFnYW5hIG9ic7N1Z2EgY29va2llcykuPC9wPjwvZGl2PjwvZGl2PiIpOwp9Cn0KKi8KaWYgKGRvY3VtZW50LmltYWdlcykgewogIHZhciBjdXJySW1nOwogIHZhciBJbWdGb3VuZCA9IDA7CiAgdmFyIExpbmtGb3VuZCA9IDA7CiAgLy9hbGVydCgiY2hlY2tpbmcgaW1hZ2VzLi4iKTsKICBmb3IgKHZhciBkPTA7IGQgPCBkb2N1bWVudC5pbWFnZXMubGVuZ3RoOyArK2QpIHsKICAgIGN1cnJJbWcgPSBkb2N1bWVudC5pbWFnZXNbZF07CiAgICBpZiAoY3VyckltZy5zcmMuaW5kZXhPZigiYmFubmVyIikgPiAtMSkgewogICAgIEltZ0ZvdW5kID0gMTsKICAgIH0KICB9CgogIGlmICghSW1nRm91bmQgfHwgQWRCbG9ja1Rlc3QpIHsKICAgICBpZihkZW55KSB7CSAKICAgICAgIGxvY2F0aW9uID0gIi9zb3JyeS5odG1sIjsKICAgICAgIHdpbmRvdy5sb2NhdGlvbihsb2NhdGlvbik7CQkKICAgICB9IGVsc2UgewoJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dhcm5pbmcnKS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnOwogICAgIH0KICB9Cgp9CgogIAp9Ci8vLS0+PC9zY3JpcHQ+CgogICAgICAgIDxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9Jy9zaGFyZS9qUXVlcnktQkVTaGFyZS5taW4uanMnPjwvc2NyaXB0PgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgalF1ZXJ5KCcucG9wdXAnKS5CRVNoYXJlKHsKICAgICAgICAndHlwZSc6ICdwb3B1cCcsCiAgICAgICAgJ3RhcmdldHMnOiBbJ0ZhY2Vib29rJywgJ1R3aXR0ZXInLCAnTGlua2VkSW4nLCAnR29vZ2xlKyddLAogICAgICAgICdjbGFzcyc6ICdwb3B1cC1zaGFyZScsCiAgICAgICAgJ3ByZWZpeCc6ICdpY29uLScsCiAgICAgICAgJ29uU2hhcmUnOiBudWxsCiAgICAgICAgfSk7CiAgICAgICAgPC9zY3JpcHQ+CjxhIGNsYXNzPSJiYWNrdG9wYnV0dG9uIiBocmVmPSIjdG9wIiBzdHlsZT0iZGlzcGxheTogYmxvY2s7Ij4KICA8c3BhbiBjbGFzcz0iaWNvbi10ZXh0Ij4KICAgIDxpIGNsYXNzPSJmYSBmYS1hbmdsZS11cCI+PC9pPgogIDwvc3Bhbj4KPC9hPgoKPGRpdiBpZD0id2FybmluZyIgc3R5bGU9IiAgei1pbmRleDogOTk5OyB2aXNpYmlsaXR5OmhpZGRlbjsgcG9zaXRpb246YWJzb2x1dGU7IGJhY2tncm91bmQ6ICNmZmZmYzA7IHdpZHRoOjExMzBweDsgaGVpZ2h0OiA1MCU7IGxlZnQ6IDUwJTsgbWFyZ2luLXJpZ2h0OiAtNTAlOyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsgdG9wOjUwJTsgcGFkZGluZzogNDBweCA0MHB4IDE0MHB4IDQwcHg7IGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOyAiPgogPHA+PGNlbnRlcj48Zm9udCBzaXplPTU+PGJlPjxiPiEhISBXQa9ORSAhISE8YnI+IDxicj5XeWdssWRhIG5hIHRvLCC/ZSBrb3J6eXN0YXN6IHogb3Byb2dyYW1vd2FuaWEgYmxva3VqsWNlZ28gd3m2d2lldGxhbmllIHJla2xhbS48L2I+PC9jZW50ZXI+PC9mb250PgogPGJyPjxicj48aW1nIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDIwcHg7IiBoc3BhY2U9MjAgYWxpZ249cmlnaHQgc3JjPSJhZGJsb2NrLmpwZyI+IDxmb250IHNpemU9Mz5PcHR5Y3puZS5wbCBqZXN0IHNlcndpc2VtIHV0cnp5bXVqsWN5bSBzaeogZHpp6mtpIHd5tndpZXRsYW5pdSByZWtsYW0uIFByenljaG9keSB6IHJla2xhbSBwb3p3YWxharEgbmFtIG5hIHBva3J5Y2llIGtvc3p083cgendpsXphbnljaCB6IHV0cnp5bWFuaWVtIHNlcndlcvN3LCBvcLNhY2VuaWVtIG9z82IgcHJhY3VqsWN5Y2ggdyByZWRha2NqaSwgYSB0YWu/ZSBuYSB6YWt1cCBzcHJ66nR1IGtvbXB1dGVyb3dlZ28gaSB3eXBvc2G/ZW5pZSBzdHVkaW8sIHcga3TzcnltIHByb3dhZHppbXkgdGVzdHkuCiA8cD48YnI+PGI+QupkemllbXkgd2R6aepjem5pLCBqZbZsaSBkb2Rhc3ogc3Ryb27qIE9wdHljem5lLnBsIGRvIHd5arF0a/N3IHcgZmlsdHJ6ZSBibG9rdWqxY3ltIHJla2xhbXkuPC9iPjxicj48YnI+WiBn83J5IGR6aeprdWplbXkgemEgenJvenVtaWVuaWUuPC9mb250PjwvcD4KIDxwPjxicj48YnI+PGI+PGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlZGl2KCkiPktsaWtuaWogdHV0YWogYWJ5IHphbWtuseYgdG8gb2tubzwvYT4uPC9iPjwvcD4KIDxwPjxicj5Lb211bmlrYXQgbmllIHd5tndpZXRsaSBzaeogd2nqY2VqIHBvZGN6YXMgdGVqIHNlc2ppICh3eW1hZ2FuYSBvYnOzdWdhIGNvb2tpZXMpLjwvcD48L2Rpdj48L2Rpdj48c2NyaXB0PgpmdW5jdGlvbiBoaWRlZGl2KCkgCnsKICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCkgCiAgICB7CiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2FybmluZycpLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJzsKICAgIGRvY3VtZW50LmNvb2tpZSA9ICJ3YXJuZWQ9dHJ1ZTsgUEFUSD0vIjsKICAgIH0KfQoKPC9zY3JpcHQ+CgoKICAgIDwhLS0gRU5EIGJvZHkgLS0+CjwvYm9keT4KICAgIDwhLS0gRU5EIGh0bWwgLS0+CjwvaHRtbD4="}, "headers": {"Date": ["Sat, 25 Jan 2025 16:27:01 GMT"], "Server": ["Apache"], "Strict-Transport-Security": ["max-age=63072000"], "Set-Cookie": ["PHPSESSID=9ns32ass06sap014cg8ark3ku1; path=/"], "Expires": ["Thu, 19 Nov 1981 08:52:00 GMT"], "Cache-Control": ["no-store, no-cache, must-revalidate, post-check=0, pre-check=0"], "Pragma": ["no-cache"], "Keep-Alive": ["timeout=4, max=100"], "Connection": ["Keep-Alive"], "Transfer-Encoding": ["chunked"], "Content-Type": ["text/html; charset=ISO-8859-2"]}, "status": {"code": 200, "message": "OK"}, "url": "https://www.optyczne.pl/153-Pentax_*ist_DL2-specyfikacja_aparatu.html"}, "recorded_at": "2025-01-25T16:27:01"}], "recorded_with": "betamax/0.8.1"}